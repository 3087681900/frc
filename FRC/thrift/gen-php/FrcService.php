<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * **************************************************************************************************
 *  interface
 * ***************************************************************************************************
 */
interface FrcServiceIf {
  /**
   * @param int $logIndex
   * @param string $caller
   * @param string $user
   * @param string $key
   * @param string $ext
   * @return string
   */
  public function get($logIndex, $caller, $user, $key, $ext);
  /**
   * @param int $logIndex
   * @param string $caller
   * @param string $srcStr
   * @param string $ext
   * @return string
   */
  public function echo($logIndex, $caller, $srcStr, $ext);
}

class FrcServiceClient implements \FrcServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function get($logIndex, $caller, $user, $key, $ext)
  {
    $this->send_get($logIndex, $caller, $user, $key, $ext);
    return $this->recv_get();
  }

  public function send_get($logIndex, $caller, $user, $key, $ext)
  {
    $args = new \FrcService_get_args();
    $args->logIndex = $logIndex;
    $args->caller = $caller;
    $args->user = $user;
    $args->key = $key;
    $args->ext = $ext;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FrcService_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FrcService_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get failed: unknown result");
  }

  public function echo($logIndex, $caller, $srcStr, $ext)
  {
    $this->send_echo($logIndex, $caller, $srcStr, $ext);
    return $this->recv_echo();
  }

  public function send_echo($logIndex, $caller, $srcStr, $ext)
  {
    $args = new \FrcService_echo_args();
    $args->logIndex = $logIndex;
    $args->caller = $caller;
    $args->srcStr = $srcStr;
    $args->ext = $ext;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'echo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('echo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_echo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\FrcService_echo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \FrcService_echo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("echo failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class FrcService_get_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $logIndex = null;
  /**
   * @var string
   */
  public $caller = null;
  /**
   * @var string
   */
  public $user = null;
  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logIndex',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'caller',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ext',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logIndex'])) {
        $this->logIndex = $vals['logIndex'];
      }
      if (isset($vals['caller'])) {
        $this->caller = $vals['caller'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ext'])) {
        $this->ext = $vals['ext'];
      }
    }
  }

  public function getName() {
    return 'FrcService_get_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->logIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->caller);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FrcService_get_args');
    if ($this->logIndex !== null) {
      $xfer += $output->writeFieldBegin('logIndex', TType::I64, 1);
      $xfer += $output->writeI64($this->logIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->caller !== null) {
      $xfer += $output->writeFieldBegin('caller', TType::STRING, 2);
      $xfer += $output->writeString($this->caller);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      $xfer += $output->writeFieldBegin('user', TType::STRING, 3);
      $xfer += $output->writeString($this->user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 4);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext !== null) {
      $xfer += $output->writeFieldBegin('ext', TType::STRING, 5);
      $xfer += $output->writeString($this->ext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FrcService_get_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FrcService_get_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FrcService_get_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FrcService_echo_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $logIndex = null;
  /**
   * @var string
   */
  public $caller = null;
  /**
   * @var string
   */
  public $srcStr = null;
  /**
   * @var string
   */
  public $ext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logIndex',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'caller',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'srcStr',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ext',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logIndex'])) {
        $this->logIndex = $vals['logIndex'];
      }
      if (isset($vals['caller'])) {
        $this->caller = $vals['caller'];
      }
      if (isset($vals['srcStr'])) {
        $this->srcStr = $vals['srcStr'];
      }
      if (isset($vals['ext'])) {
        $this->ext = $vals['ext'];
      }
    }
  }

  public function getName() {
    return 'FrcService_echo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->logIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->caller);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FrcService_echo_args');
    if ($this->logIndex !== null) {
      $xfer += $output->writeFieldBegin('logIndex', TType::I64, 1);
      $xfer += $output->writeI64($this->logIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->caller !== null) {
      $xfer += $output->writeFieldBegin('caller', TType::STRING, 2);
      $xfer += $output->writeString($this->caller);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcStr !== null) {
      $xfer += $output->writeFieldBegin('srcStr', TType::STRING, 3);
      $xfer += $output->writeString($this->srcStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext !== null) {
      $xfer += $output->writeFieldBegin('ext', TType::STRING, 4);
      $xfer += $output->writeString($this->ext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FrcService_echo_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'FrcService_echo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FrcService_echo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


