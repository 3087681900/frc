/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.frc.thrift.stub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-05")
public class FrcService {

  /**
   * **************************************************************************************************
   *  interface
   * ***************************************************************************************************
   */
  public interface Iface {

    public com.frc.thrift.datatype.ResStr getv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool setv(long logIndex, String caller, String key, String value, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool migrate(long logIndex, String caller, String key, String host, int port, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResLong incr(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool delv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResStr hget(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResSetStr hVals(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool hset(long logIndex, String caller, String key, String field, String value, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool hexists(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool hmset(long logIndex, String caller, String key, Map<String,String> hash, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResMapStrStr hgetAll(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResListStr hmget(long logIndex, String caller, String key, List<String> fields, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool hdel(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool zadd(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool zaddmember(long logIndex, String caller, String key, double score, String member, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool zrem(long logIndex, String caller, String key, List<String> members, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResSetStr zrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResSetStr zrevrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResSetStr zrevrangeByScore(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResDouble zscore(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResLong zrevrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResLong zrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool exists(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResListStr lrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool setnx(long logIndex, String caller, String key, String value, int expired_time, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool lpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool rpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException;

    public com.frc.thrift.datatype.ResBool expired(long logIndex, String caller, String key, int seconds, String ext) throws org.apache.thrift.TException;

    public String echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getv(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setv(long logIndex, String caller, String key, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void migrate(long logIndex, String caller, String key, String host, int port, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void incr(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void delv(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hget(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hVals(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hset(long logIndex, String caller, String key, String field, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hexists(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hmset(long logIndex, String caller, String key, Map<String,String> hash, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hgetAll(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hmget(long logIndex, String caller, String key, List<String> fields, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void hdel(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zadd(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zaddmember(long logIndex, String caller, String key, double score, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrem(long logIndex, String caller, String key, List<String> members, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrevrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrevrangeByScore(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zscore(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrevrank(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zrank(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exists(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setnx(long logIndex, String caller, String key, String value, int expired_time, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lpush(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpush(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void expired(long logIndex, String caller, String key, int seconds, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void echo(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.frc.thrift.datatype.ResStr getv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_getv(logIndex, caller, key, ext);
      return recv_getv();
    }

    public void send_getv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      getv_args args = new getv_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("getv", args);
    }

    public com.frc.thrift.datatype.ResStr recv_getv() throws org.apache.thrift.TException
    {
      getv_result result = new getv_result();
      receiveBase(result, "getv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getv failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool setv(long logIndex, String caller, String key, String value, String ext) throws org.apache.thrift.TException
    {
      send_setv(logIndex, caller, key, value, ext);
      return recv_setv();
    }

    public void send_setv(long logIndex, String caller, String key, String value, String ext) throws org.apache.thrift.TException
    {
      setv_args args = new setv_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setValue(value);
      args.setExt(ext);
      sendBase("setv", args);
    }

    public com.frc.thrift.datatype.ResBool recv_setv() throws org.apache.thrift.TException
    {
      setv_result result = new setv_result();
      receiveBase(result, "setv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setv failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool migrate(long logIndex, String caller, String key, String host, int port, String ext) throws org.apache.thrift.TException
    {
      send_migrate(logIndex, caller, key, host, port, ext);
      return recv_migrate();
    }

    public void send_migrate(long logIndex, String caller, String key, String host, int port, String ext) throws org.apache.thrift.TException
    {
      migrate_args args = new migrate_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setHost(host);
      args.setPort(port);
      args.setExt(ext);
      sendBase("migrate", args);
    }

    public com.frc.thrift.datatype.ResBool recv_migrate() throws org.apache.thrift.TException
    {
      migrate_result result = new migrate_result();
      receiveBase(result, "migrate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "migrate failed: unknown result");
    }

    public com.frc.thrift.datatype.ResLong incr(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_incr(logIndex, caller, key, ext);
      return recv_incr();
    }

    public void send_incr(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      incr_args args = new incr_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("incr", args);
    }

    public com.frc.thrift.datatype.ResLong recv_incr() throws org.apache.thrift.TException
    {
      incr_result result = new incr_result();
      receiveBase(result, "incr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incr failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool delv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_delv(logIndex, caller, key, ext);
      return recv_delv();
    }

    public void send_delv(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      delv_args args = new delv_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("delv", args);
    }

    public com.frc.thrift.datatype.ResBool recv_delv() throws org.apache.thrift.TException
    {
      delv_result result = new delv_result();
      receiveBase(result, "delv");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "delv failed: unknown result");
    }

    public com.frc.thrift.datatype.ResStr hget(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      send_hget(logIndex, caller, key, field, ext);
      return recv_hget();
    }

    public void send_hget(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      hget_args args = new hget_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setField(field);
      args.setExt(ext);
      sendBase("hget", args);
    }

    public com.frc.thrift.datatype.ResStr recv_hget() throws org.apache.thrift.TException
    {
      hget_result result = new hget_result();
      receiveBase(result, "hget");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hget failed: unknown result");
    }

    public com.frc.thrift.datatype.ResSetStr hVals(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_hVals(logIndex, caller, key, ext);
      return recv_hVals();
    }

    public void send_hVals(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      hVals_args args = new hVals_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("hVals", args);
    }

    public com.frc.thrift.datatype.ResSetStr recv_hVals() throws org.apache.thrift.TException
    {
      hVals_result result = new hVals_result();
      receiveBase(result, "hVals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hVals failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool hset(long logIndex, String caller, String key, String field, String value, String ext) throws org.apache.thrift.TException
    {
      send_hset(logIndex, caller, key, field, value, ext);
      return recv_hset();
    }

    public void send_hset(long logIndex, String caller, String key, String field, String value, String ext) throws org.apache.thrift.TException
    {
      hset_args args = new hset_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setField(field);
      args.setValue(value);
      args.setExt(ext);
      sendBase("hset", args);
    }

    public com.frc.thrift.datatype.ResBool recv_hset() throws org.apache.thrift.TException
    {
      hset_result result = new hset_result();
      receiveBase(result, "hset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hset failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool hexists(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      send_hexists(logIndex, caller, key, field, ext);
      return recv_hexists();
    }

    public void send_hexists(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      hexists_args args = new hexists_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setField(field);
      args.setExt(ext);
      sendBase("hexists", args);
    }

    public com.frc.thrift.datatype.ResBool recv_hexists() throws org.apache.thrift.TException
    {
      hexists_result result = new hexists_result();
      receiveBase(result, "hexists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hexists failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool hmset(long logIndex, String caller, String key, Map<String,String> hash, String ext) throws org.apache.thrift.TException
    {
      send_hmset(logIndex, caller, key, hash, ext);
      return recv_hmset();
    }

    public void send_hmset(long logIndex, String caller, String key, Map<String,String> hash, String ext) throws org.apache.thrift.TException
    {
      hmset_args args = new hmset_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setHash(hash);
      args.setExt(ext);
      sendBase("hmset", args);
    }

    public com.frc.thrift.datatype.ResBool recv_hmset() throws org.apache.thrift.TException
    {
      hmset_result result = new hmset_result();
      receiveBase(result, "hmset");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hmset failed: unknown result");
    }

    public com.frc.thrift.datatype.ResMapStrStr hgetAll(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_hgetAll(logIndex, caller, key, ext);
      return recv_hgetAll();
    }

    public void send_hgetAll(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      hgetAll_args args = new hgetAll_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("hgetAll", args);
    }

    public com.frc.thrift.datatype.ResMapStrStr recv_hgetAll() throws org.apache.thrift.TException
    {
      hgetAll_result result = new hgetAll_result();
      receiveBase(result, "hgetAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hgetAll failed: unknown result");
    }

    public com.frc.thrift.datatype.ResListStr hmget(long logIndex, String caller, String key, List<String> fields, String ext) throws org.apache.thrift.TException
    {
      send_hmget(logIndex, caller, key, fields, ext);
      return recv_hmget();
    }

    public void send_hmget(long logIndex, String caller, String key, List<String> fields, String ext) throws org.apache.thrift.TException
    {
      hmget_args args = new hmget_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setFields(fields);
      args.setExt(ext);
      sendBase("hmget", args);
    }

    public com.frc.thrift.datatype.ResListStr recv_hmget() throws org.apache.thrift.TException
    {
      hmget_result result = new hmget_result();
      receiveBase(result, "hmget");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hmget failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool hdel(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      send_hdel(logIndex, caller, key, field, ext);
      return recv_hdel();
    }

    public void send_hdel(long logIndex, String caller, String key, String field, String ext) throws org.apache.thrift.TException
    {
      hdel_args args = new hdel_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setField(field);
      args.setExt(ext);
      sendBase("hdel", args);
    }

    public com.frc.thrift.datatype.ResBool recv_hdel() throws org.apache.thrift.TException
    {
      hdel_result result = new hdel_result();
      receiveBase(result, "hdel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hdel failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool zadd(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext) throws org.apache.thrift.TException
    {
      send_zadd(logIndex, caller, key, scoreMembers, ext);
      return recv_zadd();
    }

    public void send_zadd(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext) throws org.apache.thrift.TException
    {
      zadd_args args = new zadd_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setScoreMembers(scoreMembers);
      args.setExt(ext);
      sendBase("zadd", args);
    }

    public com.frc.thrift.datatype.ResBool recv_zadd() throws org.apache.thrift.TException
    {
      zadd_result result = new zadd_result();
      receiveBase(result, "zadd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zadd failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool zaddmember(long logIndex, String caller, String key, double score, String member, String ext) throws org.apache.thrift.TException
    {
      send_zaddmember(logIndex, caller, key, score, member, ext);
      return recv_zaddmember();
    }

    public void send_zaddmember(long logIndex, String caller, String key, double score, String member, String ext) throws org.apache.thrift.TException
    {
      zaddmember_args args = new zaddmember_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setScore(score);
      args.setMember(member);
      args.setExt(ext);
      sendBase("zaddmember", args);
    }

    public com.frc.thrift.datatype.ResBool recv_zaddmember() throws org.apache.thrift.TException
    {
      zaddmember_result result = new zaddmember_result();
      receiveBase(result, "zaddmember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zaddmember failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool zrem(long logIndex, String caller, String key, List<String> members, String ext) throws org.apache.thrift.TException
    {
      send_zrem(logIndex, caller, key, members, ext);
      return recv_zrem();
    }

    public void send_zrem(long logIndex, String caller, String key, List<String> members, String ext) throws org.apache.thrift.TException
    {
      zrem_args args = new zrem_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setMembers(members);
      args.setExt(ext);
      sendBase("zrem", args);
    }

    public com.frc.thrift.datatype.ResBool recv_zrem() throws org.apache.thrift.TException
    {
      zrem_result result = new zrem_result();
      receiveBase(result, "zrem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrem failed: unknown result");
    }

    public com.frc.thrift.datatype.ResSetStr zrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      send_zrange(logIndex, caller, key, start, ends, ext);
      return recv_zrange();
    }

    public void send_zrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      zrange_args args = new zrange_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStart(start);
      args.setEnds(ends);
      args.setExt(ext);
      sendBase("zrange", args);
    }

    public com.frc.thrift.datatype.ResSetStr recv_zrange() throws org.apache.thrift.TException
    {
      zrange_result result = new zrange_result();
      receiveBase(result, "zrange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrange failed: unknown result");
    }

    public com.frc.thrift.datatype.ResSetStr zrevrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      send_zrevrange(logIndex, caller, key, start, ends, ext);
      return recv_zrevrange();
    }

    public void send_zrevrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      zrevrange_args args = new zrevrange_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStart(start);
      args.setEnds(ends);
      args.setExt(ext);
      sendBase("zrevrange", args);
    }

    public com.frc.thrift.datatype.ResSetStr recv_zrevrange() throws org.apache.thrift.TException
    {
      zrevrange_result result = new zrevrange_result();
      receiveBase(result, "zrevrange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrevrange failed: unknown result");
    }

    public com.frc.thrift.datatype.ResSetStr zrevrangeByScore(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      send_zrevrangeByScore(logIndex, caller, key, start, ends, ext);
      return recv_zrevrangeByScore();
    }

    public void send_zrevrangeByScore(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      zrevrangeByScore_args args = new zrevrangeByScore_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStart(start);
      args.setEnds(ends);
      args.setExt(ext);
      sendBase("zrevrangeByScore", args);
    }

    public com.frc.thrift.datatype.ResSetStr recv_zrevrangeByScore() throws org.apache.thrift.TException
    {
      zrevrangeByScore_result result = new zrevrangeByScore_result();
      receiveBase(result, "zrevrangeByScore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrevrangeByScore failed: unknown result");
    }

    public com.frc.thrift.datatype.ResDouble zscore(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      send_zscore(logIndex, caller, key, member, ext);
      return recv_zscore();
    }

    public void send_zscore(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      zscore_args args = new zscore_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setMember(member);
      args.setExt(ext);
      sendBase("zscore", args);
    }

    public com.frc.thrift.datatype.ResDouble recv_zscore() throws org.apache.thrift.TException
    {
      zscore_result result = new zscore_result();
      receiveBase(result, "zscore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zscore failed: unknown result");
    }

    public com.frc.thrift.datatype.ResLong zrevrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      send_zrevrank(logIndex, caller, key, member, ext);
      return recv_zrevrank();
    }

    public void send_zrevrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      zrevrank_args args = new zrevrank_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setMember(member);
      args.setExt(ext);
      sendBase("zrevrank", args);
    }

    public com.frc.thrift.datatype.ResLong recv_zrevrank() throws org.apache.thrift.TException
    {
      zrevrank_result result = new zrevrank_result();
      receiveBase(result, "zrevrank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrevrank failed: unknown result");
    }

    public com.frc.thrift.datatype.ResLong zrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      send_zrank(logIndex, caller, key, member, ext);
      return recv_zrank();
    }

    public void send_zrank(long logIndex, String caller, String key, String member, String ext) throws org.apache.thrift.TException
    {
      zrank_args args = new zrank_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setMember(member);
      args.setExt(ext);
      sendBase("zrank", args);
    }

    public com.frc.thrift.datatype.ResLong recv_zrank() throws org.apache.thrift.TException
    {
      zrank_result result = new zrank_result();
      receiveBase(result, "zrank");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "zrank failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool exists(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      send_exists(logIndex, caller, key, ext);
      return recv_exists();
    }

    public void send_exists(long logIndex, String caller, String key, String ext) throws org.apache.thrift.TException
    {
      exists_args args = new exists_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setExt(ext);
      sendBase("exists", args);
    }

    public com.frc.thrift.datatype.ResBool recv_exists() throws org.apache.thrift.TException
    {
      exists_result result = new exists_result();
      receiveBase(result, "exists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exists failed: unknown result");
    }

    public com.frc.thrift.datatype.ResListStr lrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      send_lrange(logIndex, caller, key, start, ends, ext);
      return recv_lrange();
    }

    public void send_lrange(long logIndex, String caller, String key, long start, long ends, String ext) throws org.apache.thrift.TException
    {
      lrange_args args = new lrange_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStart(start);
      args.setEnds(ends);
      args.setExt(ext);
      sendBase("lrange", args);
    }

    public com.frc.thrift.datatype.ResListStr recv_lrange() throws org.apache.thrift.TException
    {
      lrange_result result = new lrange_result();
      receiveBase(result, "lrange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lrange failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool setnx(long logIndex, String caller, String key, String value, int expired_time, String ext) throws org.apache.thrift.TException
    {
      send_setnx(logIndex, caller, key, value, expired_time, ext);
      return recv_setnx();
    }

    public void send_setnx(long logIndex, String caller, String key, String value, int expired_time, String ext) throws org.apache.thrift.TException
    {
      setnx_args args = new setnx_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setValue(value);
      args.setExpired_time(expired_time);
      args.setExt(ext);
      sendBase("setnx", args);
    }

    public com.frc.thrift.datatype.ResBool recv_setnx() throws org.apache.thrift.TException
    {
      setnx_result result = new setnx_result();
      receiveBase(result, "setnx");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setnx failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool lpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException
    {
      send_lpush(logIndex, caller, key, strings, ext);
      return recv_lpush();
    }

    public void send_lpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException
    {
      lpush_args args = new lpush_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStrings(strings);
      args.setExt(ext);
      sendBase("lpush", args);
    }

    public com.frc.thrift.datatype.ResBool recv_lpush() throws org.apache.thrift.TException
    {
      lpush_result result = new lpush_result();
      receiveBase(result, "lpush");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lpush failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool rpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException
    {
      send_rpush(logIndex, caller, key, strings, ext);
      return recv_rpush();
    }

    public void send_rpush(long logIndex, String caller, String key, List<String> strings, String ext) throws org.apache.thrift.TException
    {
      rpush_args args = new rpush_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setStrings(strings);
      args.setExt(ext);
      sendBase("rpush", args);
    }

    public com.frc.thrift.datatype.ResBool recv_rpush() throws org.apache.thrift.TException
    {
      rpush_result result = new rpush_result();
      receiveBase(result, "rpush");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpush failed: unknown result");
    }

    public com.frc.thrift.datatype.ResBool expired(long logIndex, String caller, String key, int seconds, String ext) throws org.apache.thrift.TException
    {
      send_expired(logIndex, caller, key, seconds, ext);
      return recv_expired();
    }

    public void send_expired(long logIndex, String caller, String key, int seconds, String ext) throws org.apache.thrift.TException
    {
      expired_args args = new expired_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setKey(key);
      args.setSeconds(seconds);
      args.setExt(ext);
      sendBase("expired", args);
    }

    public com.frc.thrift.datatype.ResBool recv_expired() throws org.apache.thrift.TException
    {
      expired_result result = new expired_result();
      receiveBase(result, "expired");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "expired failed: unknown result");
    }

    public String echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException
    {
      send_echo(logIndex, caller, srcStr, ext);
      return recv_echo();
    }

    public void send_echo(long logIndex, String caller, String srcStr, String ext) throws org.apache.thrift.TException
    {
      echo_args args = new echo_args();
      args.setLogIndex(logIndex);
      args.setCaller(caller);
      args.setSrcStr(srcStr);
      args.setExt(ext);
      sendBase("echo", args);
    }

    public String recv_echo() throws org.apache.thrift.TException
    {
      echo_result result = new echo_result();
      receiveBase(result, "echo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getv(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getv_call method_call = new getv_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public getv_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getv_args args = new getv_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getv();
      }
    }

    public void setv(long logIndex, String caller, String key, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setv_call method_call = new setv_call(logIndex, caller, key, value, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String value;
      private String ext;
      public setv_call(long logIndex, String caller, String key, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.value = value;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setv_args args = new setv_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setValue(value);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setv();
      }
    }

    public void migrate(long logIndex, String caller, String key, String host, int port, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      migrate_call method_call = new migrate_call(logIndex, caller, key, host, port, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class migrate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String host;
      private int port;
      private String ext;
      public migrate_call(long logIndex, String caller, String key, String host, int port, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.host = host;
        this.port = port;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("migrate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        migrate_args args = new migrate_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setHost(host);
        args.setPort(port);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_migrate();
      }
    }

    public void incr(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incr_call method_call = new incr_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public incr_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incr_args args = new incr_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResLong getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incr();
      }
    }

    public void delv(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delv_call method_call = new delv_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delv_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public delv_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delv", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delv_args args = new delv_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_delv();
      }
    }

    public void hget(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hget_call method_call = new hget_call(logIndex, caller, key, field, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hget_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String field;
      private String ext;
      public hget_call(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.field = field;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hget", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hget_args args = new hget_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setField(field);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hget();
      }
    }

    public void hVals(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hVals_call method_call = new hVals_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hVals_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public hVals_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hVals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hVals_args args = new hVals_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResSetStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hVals();
      }
    }

    public void hset(long logIndex, String caller, String key, String field, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hset_call method_call = new hset_call(logIndex, caller, key, field, value, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String field;
      private String value;
      private String ext;
      public hset_call(long logIndex, String caller, String key, String field, String value, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.field = field;
        this.value = value;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hset_args args = new hset_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setField(field);
        args.setValue(value);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hset();
      }
    }

    public void hexists(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hexists_call method_call = new hexists_call(logIndex, caller, key, field, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hexists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String field;
      private String ext;
      public hexists_call(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.field = field;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hexists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hexists_args args = new hexists_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setField(field);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hexists();
      }
    }

    public void hmset(long logIndex, String caller, String key, Map<String,String> hash, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hmset_call method_call = new hmset_call(logIndex, caller, key, hash, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hmset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private Map<String,String> hash;
      private String ext;
      public hmset_call(long logIndex, String caller, String key, Map<String,String> hash, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.hash = hash;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hmset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hmset_args args = new hmset_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setHash(hash);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hmset();
      }
    }

    public void hgetAll(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hgetAll_call method_call = new hgetAll_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hgetAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public hgetAll_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hgetAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hgetAll_args args = new hgetAll_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResMapStrStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hgetAll();
      }
    }

    public void hmget(long logIndex, String caller, String key, List<String> fields, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hmget_call method_call = new hmget_call(logIndex, caller, key, fields, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hmget_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private List<String> fields;
      private String ext;
      public hmget_call(long logIndex, String caller, String key, List<String> fields, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.fields = fields;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hmget", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hmget_args args = new hmget_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setFields(fields);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResListStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hmget();
      }
    }

    public void hdel(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hdel_call method_call = new hdel_call(logIndex, caller, key, field, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hdel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String field;
      private String ext;
      public hdel_call(long logIndex, String caller, String key, String field, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.field = field;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hdel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hdel_args args = new hdel_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setField(field);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hdel();
      }
    }

    public void zadd(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zadd_call method_call = new zadd_call(logIndex, caller, key, scoreMembers, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zadd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private Map<String,Double> scoreMembers;
      private String ext;
      public zadd_call(long logIndex, String caller, String key, Map<String,Double> scoreMembers, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.scoreMembers = scoreMembers;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zadd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zadd_args args = new zadd_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setScoreMembers(scoreMembers);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zadd();
      }
    }

    public void zaddmember(long logIndex, String caller, String key, double score, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zaddmember_call method_call = new zaddmember_call(logIndex, caller, key, score, member, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zaddmember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private double score;
      private String member;
      private String ext;
      public zaddmember_call(long logIndex, String caller, String key, double score, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.score = score;
        this.member = member;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zaddmember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zaddmember_args args = new zaddmember_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setScore(score);
        args.setMember(member);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zaddmember();
      }
    }

    public void zrem(long logIndex, String caller, String key, List<String> members, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrem_call method_call = new zrem_call(logIndex, caller, key, members, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private List<String> members;
      private String ext;
      public zrem_call(long logIndex, String caller, String key, List<String> members, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.members = members;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrem_args args = new zrem_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setMembers(members);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrem();
      }
    }

    public void zrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrange_call method_call = new zrange_call(logIndex, caller, key, start, ends, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private long start;
      private long ends;
      private String ext;
      public zrange_call(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.start = start;
        this.ends = ends;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrange_args args = new zrange_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStart(start);
        args.setEnds(ends);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResSetStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrange();
      }
    }

    public void zrevrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrevrange_call method_call = new zrevrange_call(logIndex, caller, key, start, ends, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrevrange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private long start;
      private long ends;
      private String ext;
      public zrevrange_call(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.start = start;
        this.ends = ends;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrevrange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrevrange_args args = new zrevrange_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStart(start);
        args.setEnds(ends);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResSetStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrevrange();
      }
    }

    public void zrevrangeByScore(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrevrangeByScore_call method_call = new zrevrangeByScore_call(logIndex, caller, key, start, ends, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrevrangeByScore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private long start;
      private long ends;
      private String ext;
      public zrevrangeByScore_call(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.start = start;
        this.ends = ends;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrevrangeByScore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrevrangeByScore_args args = new zrevrangeByScore_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStart(start);
        args.setEnds(ends);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResSetStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrevrangeByScore();
      }
    }

    public void zscore(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zscore_call method_call = new zscore_call(logIndex, caller, key, member, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zscore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String member;
      private String ext;
      public zscore_call(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.member = member;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zscore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zscore_args args = new zscore_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setMember(member);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResDouble getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zscore();
      }
    }

    public void zrevrank(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrevrank_call method_call = new zrevrank_call(logIndex, caller, key, member, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrevrank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String member;
      private String ext;
      public zrevrank_call(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.member = member;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrevrank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrevrank_args args = new zrevrank_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setMember(member);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResLong getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrevrank();
      }
    }

    public void zrank(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zrank_call method_call = new zrank_call(logIndex, caller, key, member, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zrank_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String member;
      private String ext;
      public zrank_call(long logIndex, String caller, String key, String member, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.member = member;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zrank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        zrank_args args = new zrank_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setMember(member);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResLong getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_zrank();
      }
    }

    public void exists(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exists_call method_call = new exists_call(logIndex, caller, key, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String ext;
      public exists_call(long logIndex, String caller, String key, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exists_args args = new exists_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exists();
      }
    }

    public void lrange(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lrange_call method_call = new lrange_call(logIndex, caller, key, start, ends, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lrange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private long start;
      private long ends;
      private String ext;
      public lrange_call(long logIndex, String caller, String key, long start, long ends, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.start = start;
        this.ends = ends;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lrange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lrange_args args = new lrange_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStart(start);
        args.setEnds(ends);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResListStr getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lrange();
      }
    }

    public void setnx(long logIndex, String caller, String key, String value, int expired_time, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setnx_call method_call = new setnx_call(logIndex, caller, key, value, expired_time, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setnx_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private String value;
      private int expired_time;
      private String ext;
      public setnx_call(long logIndex, String caller, String key, String value, int expired_time, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.value = value;
        this.expired_time = expired_time;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setnx", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setnx_args args = new setnx_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setValue(value);
        args.setExpired_time(expired_time);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setnx();
      }
    }

    public void lpush(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lpush_call method_call = new lpush_call(logIndex, caller, key, strings, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lpush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private List<String> strings;
      private String ext;
      public lpush_call(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.strings = strings;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lpush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lpush_args args = new lpush_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStrings(strings);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lpush();
      }
    }

    public void rpush(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpush_call method_call = new rpush_call(logIndex, caller, key, strings, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private List<String> strings;
      private String ext;
      public rpush_call(long logIndex, String caller, String key, List<String> strings, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.strings = strings;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpush_args args = new rpush_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setStrings(strings);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpush();
      }
    }

    public void expired(long logIndex, String caller, String key, int seconds, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      expired_call method_call = new expired_call(logIndex, caller, key, seconds, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class expired_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String key;
      private int seconds;
      private String ext;
      public expired_call(long logIndex, String caller, String key, int seconds, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.key = key;
        this.seconds = seconds;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("expired", org.apache.thrift.protocol.TMessageType.CALL, 0));
        expired_args args = new expired_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setKey(key);
        args.setSeconds(seconds);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.frc.thrift.datatype.ResBool getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_expired();
      }
    }

    public void echo(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echo_call method_call = new echo_call(logIndex, caller, srcStr, ext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long logIndex;
      private String caller;
      private String srcStr;
      private String ext;
      public echo_call(long logIndex, String caller, String srcStr, String ext, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.logIndex = logIndex;
        this.caller = caller;
        this.srcStr = srcStr;
        this.ext = ext;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echo_args args = new echo_args();
        args.setLogIndex(logIndex);
        args.setCaller(caller);
        args.setSrcStr(srcStr);
        args.setExt(ext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getv", new getv());
      processMap.put("setv", new setv());
      processMap.put("migrate", new migrate());
      processMap.put("incr", new incr());
      processMap.put("delv", new delv());
      processMap.put("hget", new hget());
      processMap.put("hVals", new hVals());
      processMap.put("hset", new hset());
      processMap.put("hexists", new hexists());
      processMap.put("hmset", new hmset());
      processMap.put("hgetAll", new hgetAll());
      processMap.put("hmget", new hmget());
      processMap.put("hdel", new hdel());
      processMap.put("zadd", new zadd());
      processMap.put("zaddmember", new zaddmember());
      processMap.put("zrem", new zrem());
      processMap.put("zrange", new zrange());
      processMap.put("zrevrange", new zrevrange());
      processMap.put("zrevrangeByScore", new zrevrangeByScore());
      processMap.put("zscore", new zscore());
      processMap.put("zrevrank", new zrevrank());
      processMap.put("zrank", new zrank());
      processMap.put("exists", new exists());
      processMap.put("lrange", new lrange());
      processMap.put("setnx", new setnx());
      processMap.put("lpush", new lpush());
      processMap.put("rpush", new rpush());
      processMap.put("expired", new expired());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getv_args> {
      public getv() {
        super("getv");
      }

      public getv_args getEmptyArgsInstance() {
        return new getv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getv_result getResult(I iface, getv_args args) throws org.apache.thrift.TException {
        getv_result result = new getv_result();
        result.success = iface.getv(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class setv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setv_args> {
      public setv() {
        super("setv");
      }

      public setv_args getEmptyArgsInstance() {
        return new setv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setv_result getResult(I iface, setv_args args) throws org.apache.thrift.TException {
        setv_result result = new setv_result();
        result.success = iface.setv(args.logIndex, args.caller, args.key, args.value, args.ext);
        return result;
      }
    }

    public static class migrate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, migrate_args> {
      public migrate() {
        super("migrate");
      }

      public migrate_args getEmptyArgsInstance() {
        return new migrate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public migrate_result getResult(I iface, migrate_args args) throws org.apache.thrift.TException {
        migrate_result result = new migrate_result();
        result.success = iface.migrate(args.logIndex, args.caller, args.key, args.host, args.port, args.ext);
        return result;
      }
    }

    public static class incr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incr_args> {
      public incr() {
        super("incr");
      }

      public incr_args getEmptyArgsInstance() {
        return new incr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public incr_result getResult(I iface, incr_args args) throws org.apache.thrift.TException {
        incr_result result = new incr_result();
        result.success = iface.incr(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class delv<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delv_args> {
      public delv() {
        super("delv");
      }

      public delv_args getEmptyArgsInstance() {
        return new delv_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public delv_result getResult(I iface, delv_args args) throws org.apache.thrift.TException {
        delv_result result = new delv_result();
        result.success = iface.delv(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class hget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hget_args> {
      public hget() {
        super("hget");
      }

      public hget_args getEmptyArgsInstance() {
        return new hget_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hget_result getResult(I iface, hget_args args) throws org.apache.thrift.TException {
        hget_result result = new hget_result();
        result.success = iface.hget(args.logIndex, args.caller, args.key, args.field, args.ext);
        return result;
      }
    }

    public static class hVals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hVals_args> {
      public hVals() {
        super("hVals");
      }

      public hVals_args getEmptyArgsInstance() {
        return new hVals_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hVals_result getResult(I iface, hVals_args args) throws org.apache.thrift.TException {
        hVals_result result = new hVals_result();
        result.success = iface.hVals(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class hset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hset_args> {
      public hset() {
        super("hset");
      }

      public hset_args getEmptyArgsInstance() {
        return new hset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hset_result getResult(I iface, hset_args args) throws org.apache.thrift.TException {
        hset_result result = new hset_result();
        result.success = iface.hset(args.logIndex, args.caller, args.key, args.field, args.value, args.ext);
        return result;
      }
    }

    public static class hexists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hexists_args> {
      public hexists() {
        super("hexists");
      }

      public hexists_args getEmptyArgsInstance() {
        return new hexists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hexists_result getResult(I iface, hexists_args args) throws org.apache.thrift.TException {
        hexists_result result = new hexists_result();
        result.success = iface.hexists(args.logIndex, args.caller, args.key, args.field, args.ext);
        return result;
      }
    }

    public static class hmset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hmset_args> {
      public hmset() {
        super("hmset");
      }

      public hmset_args getEmptyArgsInstance() {
        return new hmset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hmset_result getResult(I iface, hmset_args args) throws org.apache.thrift.TException {
        hmset_result result = new hmset_result();
        result.success = iface.hmset(args.logIndex, args.caller, args.key, args.hash, args.ext);
        return result;
      }
    }

    public static class hgetAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hgetAll_args> {
      public hgetAll() {
        super("hgetAll");
      }

      public hgetAll_args getEmptyArgsInstance() {
        return new hgetAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hgetAll_result getResult(I iface, hgetAll_args args) throws org.apache.thrift.TException {
        hgetAll_result result = new hgetAll_result();
        result.success = iface.hgetAll(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class hmget<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hmget_args> {
      public hmget() {
        super("hmget");
      }

      public hmget_args getEmptyArgsInstance() {
        return new hmget_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hmget_result getResult(I iface, hmget_args args) throws org.apache.thrift.TException {
        hmget_result result = new hmget_result();
        result.success = iface.hmget(args.logIndex, args.caller, args.key, args.fields, args.ext);
        return result;
      }
    }

    public static class hdel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hdel_args> {
      public hdel() {
        super("hdel");
      }

      public hdel_args getEmptyArgsInstance() {
        return new hdel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hdel_result getResult(I iface, hdel_args args) throws org.apache.thrift.TException {
        hdel_result result = new hdel_result();
        result.success = iface.hdel(args.logIndex, args.caller, args.key, args.field, args.ext);
        return result;
      }
    }

    public static class zadd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zadd_args> {
      public zadd() {
        super("zadd");
      }

      public zadd_args getEmptyArgsInstance() {
        return new zadd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zadd_result getResult(I iface, zadd_args args) throws org.apache.thrift.TException {
        zadd_result result = new zadd_result();
        result.success = iface.zadd(args.logIndex, args.caller, args.key, args.scoreMembers, args.ext);
        return result;
      }
    }

    public static class zaddmember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zaddmember_args> {
      public zaddmember() {
        super("zaddmember");
      }

      public zaddmember_args getEmptyArgsInstance() {
        return new zaddmember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zaddmember_result getResult(I iface, zaddmember_args args) throws org.apache.thrift.TException {
        zaddmember_result result = new zaddmember_result();
        result.success = iface.zaddmember(args.logIndex, args.caller, args.key, args.score, args.member, args.ext);
        return result;
      }
    }

    public static class zrem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrem_args> {
      public zrem() {
        super("zrem");
      }

      public zrem_args getEmptyArgsInstance() {
        return new zrem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrem_result getResult(I iface, zrem_args args) throws org.apache.thrift.TException {
        zrem_result result = new zrem_result();
        result.success = iface.zrem(args.logIndex, args.caller, args.key, args.members, args.ext);
        return result;
      }
    }

    public static class zrange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrange_args> {
      public zrange() {
        super("zrange");
      }

      public zrange_args getEmptyArgsInstance() {
        return new zrange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrange_result getResult(I iface, zrange_args args) throws org.apache.thrift.TException {
        zrange_result result = new zrange_result();
        result.success = iface.zrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext);
        return result;
      }
    }

    public static class zrevrange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrevrange_args> {
      public zrevrange() {
        super("zrevrange");
      }

      public zrevrange_args getEmptyArgsInstance() {
        return new zrevrange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrevrange_result getResult(I iface, zrevrange_args args) throws org.apache.thrift.TException {
        zrevrange_result result = new zrevrange_result();
        result.success = iface.zrevrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext);
        return result;
      }
    }

    public static class zrevrangeByScore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrevrangeByScore_args> {
      public zrevrangeByScore() {
        super("zrevrangeByScore");
      }

      public zrevrangeByScore_args getEmptyArgsInstance() {
        return new zrevrangeByScore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrevrangeByScore_result getResult(I iface, zrevrangeByScore_args args) throws org.apache.thrift.TException {
        zrevrangeByScore_result result = new zrevrangeByScore_result();
        result.success = iface.zrevrangeByScore(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext);
        return result;
      }
    }

    public static class zscore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zscore_args> {
      public zscore() {
        super("zscore");
      }

      public zscore_args getEmptyArgsInstance() {
        return new zscore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zscore_result getResult(I iface, zscore_args args) throws org.apache.thrift.TException {
        zscore_result result = new zscore_result();
        result.success = iface.zscore(args.logIndex, args.caller, args.key, args.member, args.ext);
        return result;
      }
    }

    public static class zrevrank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrevrank_args> {
      public zrevrank() {
        super("zrevrank");
      }

      public zrevrank_args getEmptyArgsInstance() {
        return new zrevrank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrevrank_result getResult(I iface, zrevrank_args args) throws org.apache.thrift.TException {
        zrevrank_result result = new zrevrank_result();
        result.success = iface.zrevrank(args.logIndex, args.caller, args.key, args.member, args.ext);
        return result;
      }
    }

    public static class zrank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zrank_args> {
      public zrank() {
        super("zrank");
      }

      public zrank_args getEmptyArgsInstance() {
        return new zrank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public zrank_result getResult(I iface, zrank_args args) throws org.apache.thrift.TException {
        zrank_result result = new zrank_result();
        result.success = iface.zrank(args.logIndex, args.caller, args.key, args.member, args.ext);
        return result;
      }
    }

    public static class exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_args> {
      public exists() {
        super("exists");
      }

      public exists_args getEmptyArgsInstance() {
        return new exists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exists_result getResult(I iface, exists_args args) throws org.apache.thrift.TException {
        exists_result result = new exists_result();
        result.success = iface.exists(args.logIndex, args.caller, args.key, args.ext);
        return result;
      }
    }

    public static class lrange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lrange_args> {
      public lrange() {
        super("lrange");
      }

      public lrange_args getEmptyArgsInstance() {
        return new lrange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lrange_result getResult(I iface, lrange_args args) throws org.apache.thrift.TException {
        lrange_result result = new lrange_result();
        result.success = iface.lrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext);
        return result;
      }
    }

    public static class setnx<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setnx_args> {
      public setnx() {
        super("setnx");
      }

      public setnx_args getEmptyArgsInstance() {
        return new setnx_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setnx_result getResult(I iface, setnx_args args) throws org.apache.thrift.TException {
        setnx_result result = new setnx_result();
        result.success = iface.setnx(args.logIndex, args.caller, args.key, args.value, args.expired_time, args.ext);
        return result;
      }
    }

    public static class lpush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lpush_args> {
      public lpush() {
        super("lpush");
      }

      public lpush_args getEmptyArgsInstance() {
        return new lpush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lpush_result getResult(I iface, lpush_args args) throws org.apache.thrift.TException {
        lpush_result result = new lpush_result();
        result.success = iface.lpush(args.logIndex, args.caller, args.key, args.strings, args.ext);
        return result;
      }
    }

    public static class rpush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpush_args> {
      public rpush() {
        super("rpush");
      }

      public rpush_args getEmptyArgsInstance() {
        return new rpush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpush_result getResult(I iface, rpush_args args) throws org.apache.thrift.TException {
        rpush_result result = new rpush_result();
        result.success = iface.rpush(args.logIndex, args.caller, args.key, args.strings, args.ext);
        return result;
      }
    }

    public static class expired<I extends Iface> extends org.apache.thrift.ProcessFunction<I, expired_args> {
      public expired() {
        super("expired");
      }

      public expired_args getEmptyArgsInstance() {
        return new expired_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public expired_result getResult(I iface, expired_args args) throws org.apache.thrift.TException {
        expired_result result = new expired_result();
        result.success = iface.expired(args.logIndex, args.caller, args.key, args.seconds, args.ext);
        return result;
      }
    }

    public static class echo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo_args> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public echo_result getResult(I iface, echo_args args) throws org.apache.thrift.TException {
        echo_result result = new echo_result();
        result.success = iface.echo(args.logIndex, args.caller, args.srcStr, args.ext);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getv", new getv());
      processMap.put("setv", new setv());
      processMap.put("migrate", new migrate());
      processMap.put("incr", new incr());
      processMap.put("delv", new delv());
      processMap.put("hget", new hget());
      processMap.put("hVals", new hVals());
      processMap.put("hset", new hset());
      processMap.put("hexists", new hexists());
      processMap.put("hmset", new hmset());
      processMap.put("hgetAll", new hgetAll());
      processMap.put("hmget", new hmget());
      processMap.put("hdel", new hdel());
      processMap.put("zadd", new zadd());
      processMap.put("zaddmember", new zaddmember());
      processMap.put("zrem", new zrem());
      processMap.put("zrange", new zrange());
      processMap.put("zrevrange", new zrevrange());
      processMap.put("zrevrangeByScore", new zrevrangeByScore());
      processMap.put("zscore", new zscore());
      processMap.put("zrevrank", new zrevrank());
      processMap.put("zrank", new zrank());
      processMap.put("exists", new exists());
      processMap.put("lrange", new lrange());
      processMap.put("setnx", new setnx());
      processMap.put("lpush", new lpush());
      processMap.put("rpush", new rpush());
      processMap.put("expired", new expired());
      processMap.put("echo", new echo());
      return processMap;
    }

    public static class getv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getv_args, com.frc.thrift.datatype.ResStr> {
      public getv() {
        super("getv");
      }

      public getv_args getEmptyArgsInstance() {
        return new getv_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResStr o) {
            getv_result result = new getv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getv_result result = new getv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getv_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResStr> resultHandler) throws TException {
        iface.getv(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class setv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setv_args, com.frc.thrift.datatype.ResBool> {
      public setv() {
        super("setv");
      }

      public setv_args getEmptyArgsInstance() {
        return new setv_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            setv_result result = new setv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setv_result result = new setv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setv_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.setv(args.logIndex, args.caller, args.key, args.value, args.ext,resultHandler);
      }
    }

    public static class migrate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, migrate_args, com.frc.thrift.datatype.ResBool> {
      public migrate() {
        super("migrate");
      }

      public migrate_args getEmptyArgsInstance() {
        return new migrate_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            migrate_result result = new migrate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            migrate_result result = new migrate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, migrate_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.migrate(args.logIndex, args.caller, args.key, args.host, args.port, args.ext,resultHandler);
      }
    }

    public static class incr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, incr_args, com.frc.thrift.datatype.ResLong> {
      public incr() {
        super("incr");
      }

      public incr_args getEmptyArgsInstance() {
        return new incr_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResLong> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResLong>() { 
          public void onComplete(com.frc.thrift.datatype.ResLong o) {
            incr_result result = new incr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            incr_result result = new incr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, incr_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResLong> resultHandler) throws TException {
        iface.incr(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class delv<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, delv_args, com.frc.thrift.datatype.ResBool> {
      public delv() {
        super("delv");
      }

      public delv_args getEmptyArgsInstance() {
        return new delv_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            delv_result result = new delv_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            delv_result result = new delv_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, delv_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.delv(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class hget<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hget_args, com.frc.thrift.datatype.ResStr> {
      public hget() {
        super("hget");
      }

      public hget_args getEmptyArgsInstance() {
        return new hget_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResStr o) {
            hget_result result = new hget_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hget_result result = new hget_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hget_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResStr> resultHandler) throws TException {
        iface.hget(args.logIndex, args.caller, args.key, args.field, args.ext,resultHandler);
      }
    }

    public static class hVals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hVals_args, com.frc.thrift.datatype.ResSetStr> {
      public hVals() {
        super("hVals");
      }

      public hVals_args getEmptyArgsInstance() {
        return new hVals_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResSetStr o) {
            hVals_result result = new hVals_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hVals_result result = new hVals_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hVals_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> resultHandler) throws TException {
        iface.hVals(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class hset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hset_args, com.frc.thrift.datatype.ResBool> {
      public hset() {
        super("hset");
      }

      public hset_args getEmptyArgsInstance() {
        return new hset_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            hset_result result = new hset_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hset_result result = new hset_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hset_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.hset(args.logIndex, args.caller, args.key, args.field, args.value, args.ext,resultHandler);
      }
    }

    public static class hexists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hexists_args, com.frc.thrift.datatype.ResBool> {
      public hexists() {
        super("hexists");
      }

      public hexists_args getEmptyArgsInstance() {
        return new hexists_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            hexists_result result = new hexists_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hexists_result result = new hexists_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hexists_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.hexists(args.logIndex, args.caller, args.key, args.field, args.ext,resultHandler);
      }
    }

    public static class hmset<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hmset_args, com.frc.thrift.datatype.ResBool> {
      public hmset() {
        super("hmset");
      }

      public hmset_args getEmptyArgsInstance() {
        return new hmset_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            hmset_result result = new hmset_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hmset_result result = new hmset_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hmset_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.hmset(args.logIndex, args.caller, args.key, args.hash, args.ext,resultHandler);
      }
    }

    public static class hgetAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hgetAll_args, com.frc.thrift.datatype.ResMapStrStr> {
      public hgetAll() {
        super("hgetAll");
      }

      public hgetAll_args getEmptyArgsInstance() {
        return new hgetAll_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResMapStrStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResMapStrStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResMapStrStr o) {
            hgetAll_result result = new hgetAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hgetAll_result result = new hgetAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hgetAll_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResMapStrStr> resultHandler) throws TException {
        iface.hgetAll(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class hmget<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hmget_args, com.frc.thrift.datatype.ResListStr> {
      public hmget() {
        super("hmget");
      }

      public hmget_args getEmptyArgsInstance() {
        return new hmget_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResListStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResListStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResListStr o) {
            hmget_result result = new hmget_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hmget_result result = new hmget_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hmget_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResListStr> resultHandler) throws TException {
        iface.hmget(args.logIndex, args.caller, args.key, args.fields, args.ext,resultHandler);
      }
    }

    public static class hdel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hdel_args, com.frc.thrift.datatype.ResBool> {
      public hdel() {
        super("hdel");
      }

      public hdel_args getEmptyArgsInstance() {
        return new hdel_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            hdel_result result = new hdel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hdel_result result = new hdel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hdel_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.hdel(args.logIndex, args.caller, args.key, args.field, args.ext,resultHandler);
      }
    }

    public static class zadd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zadd_args, com.frc.thrift.datatype.ResBool> {
      public zadd() {
        super("zadd");
      }

      public zadd_args getEmptyArgsInstance() {
        return new zadd_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            zadd_result result = new zadd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zadd_result result = new zadd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zadd_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.zadd(args.logIndex, args.caller, args.key, args.scoreMembers, args.ext,resultHandler);
      }
    }

    public static class zaddmember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zaddmember_args, com.frc.thrift.datatype.ResBool> {
      public zaddmember() {
        super("zaddmember");
      }

      public zaddmember_args getEmptyArgsInstance() {
        return new zaddmember_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            zaddmember_result result = new zaddmember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zaddmember_result result = new zaddmember_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zaddmember_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.zaddmember(args.logIndex, args.caller, args.key, args.score, args.member, args.ext,resultHandler);
      }
    }

    public static class zrem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrem_args, com.frc.thrift.datatype.ResBool> {
      public zrem() {
        super("zrem");
      }

      public zrem_args getEmptyArgsInstance() {
        return new zrem_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            zrem_result result = new zrem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrem_result result = new zrem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrem_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.zrem(args.logIndex, args.caller, args.key, args.members, args.ext,resultHandler);
      }
    }

    public static class zrange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrange_args, com.frc.thrift.datatype.ResSetStr> {
      public zrange() {
        super("zrange");
      }

      public zrange_args getEmptyArgsInstance() {
        return new zrange_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResSetStr o) {
            zrange_result result = new zrange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrange_result result = new zrange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrange_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> resultHandler) throws TException {
        iface.zrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext,resultHandler);
      }
    }

    public static class zrevrange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrevrange_args, com.frc.thrift.datatype.ResSetStr> {
      public zrevrange() {
        super("zrevrange");
      }

      public zrevrange_args getEmptyArgsInstance() {
        return new zrevrange_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResSetStr o) {
            zrevrange_result result = new zrevrange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrevrange_result result = new zrevrange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrevrange_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> resultHandler) throws TException {
        iface.zrevrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext,resultHandler);
      }
    }

    public static class zrevrangeByScore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrevrangeByScore_args, com.frc.thrift.datatype.ResSetStr> {
      public zrevrangeByScore() {
        super("zrevrangeByScore");
      }

      public zrevrangeByScore_args getEmptyArgsInstance() {
        return new zrevrangeByScore_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResSetStr o) {
            zrevrangeByScore_result result = new zrevrangeByScore_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrevrangeByScore_result result = new zrevrangeByScore_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrevrangeByScore_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResSetStr> resultHandler) throws TException {
        iface.zrevrangeByScore(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext,resultHandler);
      }
    }

    public static class zscore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zscore_args, com.frc.thrift.datatype.ResDouble> {
      public zscore() {
        super("zscore");
      }

      public zscore_args getEmptyArgsInstance() {
        return new zscore_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResDouble> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResDouble>() { 
          public void onComplete(com.frc.thrift.datatype.ResDouble o) {
            zscore_result result = new zscore_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zscore_result result = new zscore_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zscore_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResDouble> resultHandler) throws TException {
        iface.zscore(args.logIndex, args.caller, args.key, args.member, args.ext,resultHandler);
      }
    }

    public static class zrevrank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrevrank_args, com.frc.thrift.datatype.ResLong> {
      public zrevrank() {
        super("zrevrank");
      }

      public zrevrank_args getEmptyArgsInstance() {
        return new zrevrank_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResLong> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResLong>() { 
          public void onComplete(com.frc.thrift.datatype.ResLong o) {
            zrevrank_result result = new zrevrank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrevrank_result result = new zrevrank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrevrank_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResLong> resultHandler) throws TException {
        iface.zrevrank(args.logIndex, args.caller, args.key, args.member, args.ext,resultHandler);
      }
    }

    public static class zrank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zrank_args, com.frc.thrift.datatype.ResLong> {
      public zrank() {
        super("zrank");
      }

      public zrank_args getEmptyArgsInstance() {
        return new zrank_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResLong> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResLong>() { 
          public void onComplete(com.frc.thrift.datatype.ResLong o) {
            zrank_result result = new zrank_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            zrank_result result = new zrank_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, zrank_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResLong> resultHandler) throws TException {
        iface.zrank(args.logIndex, args.caller, args.key, args.member, args.ext,resultHandler);
      }
    }

    public static class exists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exists_args, com.frc.thrift.datatype.ResBool> {
      public exists() {
        super("exists");
      }

      public exists_args getEmptyArgsInstance() {
        return new exists_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            exists_result result = new exists_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exists_result result = new exists_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exists_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.exists(args.logIndex, args.caller, args.key, args.ext,resultHandler);
      }
    }

    public static class lrange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lrange_args, com.frc.thrift.datatype.ResListStr> {
      public lrange() {
        super("lrange");
      }

      public lrange_args getEmptyArgsInstance() {
        return new lrange_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResListStr> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResListStr>() { 
          public void onComplete(com.frc.thrift.datatype.ResListStr o) {
            lrange_result result = new lrange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lrange_result result = new lrange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lrange_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResListStr> resultHandler) throws TException {
        iface.lrange(args.logIndex, args.caller, args.key, args.start, args.ends, args.ext,resultHandler);
      }
    }

    public static class setnx<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setnx_args, com.frc.thrift.datatype.ResBool> {
      public setnx() {
        super("setnx");
      }

      public setnx_args getEmptyArgsInstance() {
        return new setnx_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            setnx_result result = new setnx_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setnx_result result = new setnx_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setnx_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.setnx(args.logIndex, args.caller, args.key, args.value, args.expired_time, args.ext,resultHandler);
      }
    }

    public static class lpush<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lpush_args, com.frc.thrift.datatype.ResBool> {
      public lpush() {
        super("lpush");
      }

      public lpush_args getEmptyArgsInstance() {
        return new lpush_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            lpush_result result = new lpush_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lpush_result result = new lpush_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lpush_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.lpush(args.logIndex, args.caller, args.key, args.strings, args.ext,resultHandler);
      }
    }

    public static class rpush<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpush_args, com.frc.thrift.datatype.ResBool> {
      public rpush() {
        super("rpush");
      }

      public rpush_args getEmptyArgsInstance() {
        return new rpush_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            rpush_result result = new rpush_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpush_result result = new rpush_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpush_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.rpush(args.logIndex, args.caller, args.key, args.strings, args.ext,resultHandler);
      }
    }

    public static class expired<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, expired_args, com.frc.thrift.datatype.ResBool> {
      public expired() {
        super("expired");
      }

      public expired_args getEmptyArgsInstance() {
        return new expired_args();
      }

      public AsyncMethodCallback<com.frc.thrift.datatype.ResBool> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.frc.thrift.datatype.ResBool>() { 
          public void onComplete(com.frc.thrift.datatype.ResBool o) {
            expired_result result = new expired_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            expired_result result = new expired_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, expired_args args, org.apache.thrift.async.AsyncMethodCallback<com.frc.thrift.datatype.ResBool> resultHandler) throws TException {
        iface.expired(args.logIndex, args.caller, args.key, args.seconds, args.ext,resultHandler);
      }
    }

    public static class echo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo_args, String> {
      public echo() {
        super("echo");
      }

      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            echo_result result = new echo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            echo_result result = new echo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.echo(args.logIndex, args.caller, args.srcStr, args.ext,resultHandler);
      }
    }

  }

  public static class getv_args implements org.apache.thrift.TBase<getv_args, getv_args._Fields>, java.io.Serializable, Cloneable, Comparable<getv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getv_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getv_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getv_args.class, metaDataMap);
    }

    public getv_args() {
    }

    public getv_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getv_args(getv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public getv_args deepCopy() {
      return new getv_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public getv_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public getv_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public getv_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public getv_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getv_args)
        return this.equals((getv_args)that);
      return false;
    }

    public boolean equals(getv_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(getv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getv_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getv_argsStandardSchemeFactory implements SchemeFactory {
      public getv_argsStandardScheme getScheme() {
        return new getv_argsStandardScheme();
      }
    }

    private static class getv_argsStandardScheme extends StandardScheme<getv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getv_argsTupleSchemeFactory implements SchemeFactory {
      public getv_argsTupleScheme getScheme() {
        return new getv_argsTupleScheme();
      }
    }

    private static class getv_argsTupleScheme extends TupleScheme<getv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class getv_result implements org.apache.thrift.TBase<getv_result, getv_result._Fields>, java.io.Serializable, Cloneable, Comparable<getv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getv_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getv_result.class, metaDataMap);
    }

    public getv_result() {
    }

    public getv_result(
      com.frc.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getv_result(getv_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResStr(other.success);
      }
    }

    public getv_result deepCopy() {
      return new getv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public getv_result setSuccess(com.frc.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getv_result)
        return this.equals((getv_result)that);
      return false;
    }

    public boolean equals(getv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getv_resultStandardSchemeFactory implements SchemeFactory {
      public getv_resultStandardScheme getScheme() {
        return new getv_resultStandardScheme();
      }
    }

    private static class getv_resultStandardScheme extends StandardScheme<getv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getv_resultTupleSchemeFactory implements SchemeFactory {
      public getv_resultTupleScheme getScheme() {
        return new getv_resultTupleScheme();
      }
    }

    private static class getv_resultTupleScheme extends TupleScheme<getv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setv_args implements org.apache.thrift.TBase<setv_args, setv_args._Fields>, java.io.Serializable, Cloneable, Comparable<setv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setv_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setv_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String value; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      VALUE((short)4, "value"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // VALUE
            return VALUE;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setv_args.class, metaDataMap);
    }

    public setv_args() {
    }

    public setv_args(
      long logIndex,
      String caller,
      String key,
      String value,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.value = value;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setv_args(setv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public setv_args deepCopy() {
      return new setv_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.value = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public setv_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public setv_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public setv_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public setv_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public setv_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setv_args)
        return this.equals((setv_args)that);
      return false;
    }

    public boolean equals(setv_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(setv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setv_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setv_argsStandardSchemeFactory implements SchemeFactory {
      public setv_argsStandardScheme getScheme() {
        return new setv_argsStandardScheme();
      }
    }

    private static class setv_argsStandardScheme extends StandardScheme<setv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setv_argsTupleSchemeFactory implements SchemeFactory {
      public setv_argsTupleScheme getScheme() {
        return new setv_argsTupleScheme();
      }
    }

    private static class setv_argsTupleScheme extends TupleScheme<setv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class setv_result implements org.apache.thrift.TBase<setv_result, setv_result._Fields>, java.io.Serializable, Cloneable, Comparable<setv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setv_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setv_result.class, metaDataMap);
    }

    public setv_result() {
    }

    public setv_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setv_result(setv_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public setv_result deepCopy() {
      return new setv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public setv_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setv_result)
        return this.equals((setv_result)that);
      return false;
    }

    public boolean equals(setv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setv_resultStandardSchemeFactory implements SchemeFactory {
      public setv_resultStandardScheme getScheme() {
        return new setv_resultStandardScheme();
      }
    }

    private static class setv_resultStandardScheme extends StandardScheme<setv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setv_resultTupleSchemeFactory implements SchemeFactory {
      public setv_resultTupleScheme getScheme() {
        return new setv_resultTupleScheme();
      }
    }

    private static class setv_resultTupleScheme extends TupleScheme<setv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class migrate_args implements org.apache.thrift.TBase<migrate_args, migrate_args._Fields>, java.io.Serializable, Cloneable, Comparable<migrate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("migrate_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new migrate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new migrate_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String host; // required
    public int port; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      HOST((short)4, "host"),
      PORT((short)5, "port"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // HOST
            return HOST;
          case 5: // PORT
            return PORT;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __PORT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(migrate_args.class, metaDataMap);
    }

    public migrate_args() {
    }

    public migrate_args(
      long logIndex,
      String caller,
      String key,
      String host,
      int port,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.host = host;
      this.port = port;
      setPortIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public migrate_args(migrate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetHost()) {
        this.host = other.host;
      }
      this.port = other.port;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public migrate_args deepCopy() {
      return new migrate_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.host = null;
      setPortIsSet(false);
      this.port = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public migrate_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public migrate_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public migrate_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getHost() {
      return this.host;
    }

    public migrate_args setHost(String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public migrate_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public migrate_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case HOST:
        return getHost();

      case PORT:
        return getPort();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case HOST:
        return isSetHost();
      case PORT:
        return isSetPort();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof migrate_args)
        return this.equals((migrate_args)that);
      return false;
    }

    public boolean equals(migrate_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_host = true && (isSetHost());
      list.add(present_host);
      if (present_host)
        list.add(host);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(migrate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("migrate_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class migrate_argsStandardSchemeFactory implements SchemeFactory {
      public migrate_argsStandardScheme getScheme() {
        return new migrate_argsStandardScheme();
      }
    }

    private static class migrate_argsStandardScheme extends StandardScheme<migrate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, migrate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, migrate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class migrate_argsTupleSchemeFactory implements SchemeFactory {
      public migrate_argsTupleScheme getScheme() {
        return new migrate_argsTupleScheme();
      }
    }

    private static class migrate_argsTupleScheme extends TupleScheme<migrate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, migrate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetHost()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, migrate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class migrate_result implements org.apache.thrift.TBase<migrate_result, migrate_result._Fields>, java.io.Serializable, Cloneable, Comparable<migrate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("migrate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new migrate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new migrate_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(migrate_result.class, metaDataMap);
    }

    public migrate_result() {
    }

    public migrate_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public migrate_result(migrate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public migrate_result deepCopy() {
      return new migrate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public migrate_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof migrate_result)
        return this.equals((migrate_result)that);
      return false;
    }

    public boolean equals(migrate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(migrate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("migrate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class migrate_resultStandardSchemeFactory implements SchemeFactory {
      public migrate_resultStandardScheme getScheme() {
        return new migrate_resultStandardScheme();
      }
    }

    private static class migrate_resultStandardScheme extends StandardScheme<migrate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, migrate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, migrate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class migrate_resultTupleSchemeFactory implements SchemeFactory {
      public migrate_resultTupleScheme getScheme() {
        return new migrate_resultTupleScheme();
      }
    }

    private static class migrate_resultTupleScheme extends TupleScheme<migrate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, migrate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, migrate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class incr_args implements org.apache.thrift.TBase<incr_args, incr_args._Fields>, java.io.Serializable, Cloneable, Comparable<incr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incr_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incr_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incr_args.class, metaDataMap);
    }

    public incr_args() {
    }

    public incr_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incr_args(incr_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public incr_args deepCopy() {
      return new incr_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public incr_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public incr_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public incr_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public incr_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incr_args)
        return this.equals((incr_args)that);
      return false;
    }

    public boolean equals(incr_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(incr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incr_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incr_argsStandardSchemeFactory implements SchemeFactory {
      public incr_argsStandardScheme getScheme() {
        return new incr_argsStandardScheme();
      }
    }

    private static class incr_argsStandardScheme extends StandardScheme<incr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incr_argsTupleSchemeFactory implements SchemeFactory {
      public incr_argsTupleScheme getScheme() {
        return new incr_argsTupleScheme();
      }
    }

    private static class incr_argsTupleScheme extends TupleScheme<incr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class incr_result implements org.apache.thrift.TBase<incr_result, incr_result._Fields>, java.io.Serializable, Cloneable, Comparable<incr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incr_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResLong success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResLong.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incr_result.class, metaDataMap);
    }

    public incr_result() {
    }

    public incr_result(
      com.frc.thrift.datatype.ResLong success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incr_result(incr_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResLong(other.success);
      }
    }

    public incr_result deepCopy() {
      return new incr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResLong getSuccess() {
      return this.success;
    }

    public incr_result setSuccess(com.frc.thrift.datatype.ResLong success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResLong)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incr_result)
        return this.equals((incr_result)that);
      return false;
    }

    public boolean equals(incr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(incr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incr_resultStandardSchemeFactory implements SchemeFactory {
      public incr_resultStandardScheme getScheme() {
        return new incr_resultStandardScheme();
      }
    }

    private static class incr_resultStandardScheme extends StandardScheme<incr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResLong();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incr_resultTupleSchemeFactory implements SchemeFactory {
      public incr_resultTupleScheme getScheme() {
        return new incr_resultTupleScheme();
      }
    }

    private static class incr_resultTupleScheme extends TupleScheme<incr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResLong();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delv_args implements org.apache.thrift.TBase<delv_args, delv_args._Fields>, java.io.Serializable, Cloneable, Comparable<delv_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delv_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delv_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delv_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delv_args.class, metaDataMap);
    }

    public delv_args() {
    }

    public delv_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delv_args(delv_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public delv_args deepCopy() {
      return new delv_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public delv_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public delv_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public delv_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public delv_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delv_args)
        return this.equals((delv_args)that);
      return false;
    }

    public boolean equals(delv_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(delv_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delv_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delv_argsStandardSchemeFactory implements SchemeFactory {
      public delv_argsStandardScheme getScheme() {
        return new delv_argsStandardScheme();
      }
    }

    private static class delv_argsStandardScheme extends StandardScheme<delv_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delv_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delv_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delv_argsTupleSchemeFactory implements SchemeFactory {
      public delv_argsTupleScheme getScheme() {
        return new delv_argsTupleScheme();
      }
    }

    private static class delv_argsTupleScheme extends TupleScheme<delv_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delv_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class delv_result implements org.apache.thrift.TBase<delv_result, delv_result._Fields>, java.io.Serializable, Cloneable, Comparable<delv_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delv_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delv_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delv_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delv_result.class, metaDataMap);
    }

    public delv_result() {
    }

    public delv_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delv_result(delv_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public delv_result deepCopy() {
      return new delv_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public delv_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delv_result)
        return this.equals((delv_result)that);
      return false;
    }

    public boolean equals(delv_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(delv_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delv_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delv_resultStandardSchemeFactory implements SchemeFactory {
      public delv_resultStandardScheme getScheme() {
        return new delv_resultStandardScheme();
      }
    }

    private static class delv_resultStandardScheme extends StandardScheme<delv_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delv_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delv_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delv_resultTupleSchemeFactory implements SchemeFactory {
      public delv_resultTupleScheme getScheme() {
        return new delv_resultTupleScheme();
      }
    }

    private static class delv_resultTupleScheme extends TupleScheme<delv_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delv_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hget_args implements org.apache.thrift.TBase<hget_args, hget_args._Fields>, java.io.Serializable, Cloneable, Comparable<hget_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hget_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hget_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hget_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String field; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      FIELD((short)4, "field"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // FIELD
            return FIELD;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hget_args.class, metaDataMap);
    }

    public hget_args() {
    }

    public hget_args(
      long logIndex,
      String caller,
      String key,
      String field,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.field = field;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hget_args(hget_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hget_args deepCopy() {
      return new hget_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.field = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hget_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hget_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hget_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getField() {
      return this.field;
    }

    public hget_args setField(String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hget_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case FIELD:
        return getField();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case FIELD:
        return isSetField();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hget_args)
        return this.equals((hget_args)that);
      return false;
    }

    public boolean equals(hget_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hget_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hget_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hget_argsStandardSchemeFactory implements SchemeFactory {
      public hget_argsStandardScheme getScheme() {
        return new hget_argsStandardScheme();
      }
    }

    private static class hget_argsStandardScheme extends StandardScheme<hget_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hget_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hget_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hget_argsTupleSchemeFactory implements SchemeFactory {
      public hget_argsTupleScheme getScheme() {
        return new hget_argsTupleScheme();
      }
    }

    private static class hget_argsTupleScheme extends TupleScheme<hget_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetField()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hget_result implements org.apache.thrift.TBase<hget_result, hget_result._Fields>, java.io.Serializable, Cloneable, Comparable<hget_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hget_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hget_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hget_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hget_result.class, metaDataMap);
    }

    public hget_result() {
    }

    public hget_result(
      com.frc.thrift.datatype.ResStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hget_result(hget_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResStr(other.success);
      }
    }

    public hget_result deepCopy() {
      return new hget_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResStr getSuccess() {
      return this.success;
    }

    public hget_result setSuccess(com.frc.thrift.datatype.ResStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hget_result)
        return this.equals((hget_result)that);
      return false;
    }

    public boolean equals(hget_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hget_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hget_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hget_resultStandardSchemeFactory implements SchemeFactory {
      public hget_resultStandardScheme getScheme() {
        return new hget_resultStandardScheme();
      }
    }

    private static class hget_resultStandardScheme extends StandardScheme<hget_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hget_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hget_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hget_resultTupleSchemeFactory implements SchemeFactory {
      public hget_resultTupleScheme getScheme() {
        return new hget_resultTupleScheme();
      }
    }

    private static class hget_resultTupleScheme extends TupleScheme<hget_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hVals_args implements org.apache.thrift.TBase<hVals_args, hVals_args._Fields>, java.io.Serializable, Cloneable, Comparable<hVals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hVals_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hVals_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hVals_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hVals_args.class, metaDataMap);
    }

    public hVals_args() {
    }

    public hVals_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hVals_args(hVals_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hVals_args deepCopy() {
      return new hVals_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hVals_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hVals_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hVals_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hVals_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hVals_args)
        return this.equals((hVals_args)that);
      return false;
    }

    public boolean equals(hVals_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hVals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hVals_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hVals_argsStandardSchemeFactory implements SchemeFactory {
      public hVals_argsStandardScheme getScheme() {
        return new hVals_argsStandardScheme();
      }
    }

    private static class hVals_argsStandardScheme extends StandardScheme<hVals_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hVals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hVals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hVals_argsTupleSchemeFactory implements SchemeFactory {
      public hVals_argsTupleScheme getScheme() {
        return new hVals_argsTupleScheme();
      }
    }

    private static class hVals_argsTupleScheme extends TupleScheme<hVals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hVals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hVals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hVals_result implements org.apache.thrift.TBase<hVals_result, hVals_result._Fields>, java.io.Serializable, Cloneable, Comparable<hVals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hVals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hVals_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hVals_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResSetStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResSetStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hVals_result.class, metaDataMap);
    }

    public hVals_result() {
    }

    public hVals_result(
      com.frc.thrift.datatype.ResSetStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hVals_result(hVals_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResSetStr(other.success);
      }
    }

    public hVals_result deepCopy() {
      return new hVals_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResSetStr getSuccess() {
      return this.success;
    }

    public hVals_result setSuccess(com.frc.thrift.datatype.ResSetStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResSetStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hVals_result)
        return this.equals((hVals_result)that);
      return false;
    }

    public boolean equals(hVals_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hVals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hVals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hVals_resultStandardSchemeFactory implements SchemeFactory {
      public hVals_resultStandardScheme getScheme() {
        return new hVals_resultStandardScheme();
      }
    }

    private static class hVals_resultStandardScheme extends StandardScheme<hVals_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hVals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResSetStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hVals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hVals_resultTupleSchemeFactory implements SchemeFactory {
      public hVals_resultTupleScheme getScheme() {
        return new hVals_resultTupleScheme();
      }
    }

    private static class hVals_resultTupleScheme extends TupleScheme<hVals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hVals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hVals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResSetStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hset_args implements org.apache.thrift.TBase<hset_args, hset_args._Fields>, java.io.Serializable, Cloneable, Comparable<hset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hset_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hset_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String field; // required
    public String value; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      FIELD((short)4, "field"),
      VALUE((short)5, "value"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // FIELD
            return FIELD;
          case 5: // VALUE
            return VALUE;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hset_args.class, metaDataMap);
    }

    public hset_args() {
    }

    public hset_args(
      long logIndex,
      String caller,
      String key,
      String field,
      String value,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.field = field;
      this.value = value;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hset_args(hset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hset_args deepCopy() {
      return new hset_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.field = null;
      this.value = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hset_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hset_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hset_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getField() {
      return this.field;
    }

    public hset_args setField(String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public hset_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hset_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case FIELD:
        return getField();

      case VALUE:
        return getValue();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case FIELD:
        return isSetField();
      case VALUE:
        return isSetValue();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hset_args)
        return this.equals((hset_args)that);
      return false;
    }

    public boolean equals(hset_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hset_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hset_argsStandardSchemeFactory implements SchemeFactory {
      public hset_argsStandardScheme getScheme() {
        return new hset_argsStandardScheme();
      }
    }

    private static class hset_argsStandardScheme extends StandardScheme<hset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hset_argsTupleSchemeFactory implements SchemeFactory {
      public hset_argsTupleScheme getScheme() {
        return new hset_argsTupleScheme();
      }
    }

    private static class hset_argsTupleScheme extends TupleScheme<hset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetField()) {
          optionals.set(3);
        }
        if (struct.isSetValue()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(4)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hset_result implements org.apache.thrift.TBase<hset_result, hset_result._Fields>, java.io.Serializable, Cloneable, Comparable<hset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hset_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hset_result.class, metaDataMap);
    }

    public hset_result() {
    }

    public hset_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hset_result(hset_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public hset_result deepCopy() {
      return new hset_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public hset_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hset_result)
        return this.equals((hset_result)that);
      return false;
    }

    public boolean equals(hset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hset_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hset_resultStandardSchemeFactory implements SchemeFactory {
      public hset_resultStandardScheme getScheme() {
        return new hset_resultStandardScheme();
      }
    }

    private static class hset_resultStandardScheme extends StandardScheme<hset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hset_resultTupleSchemeFactory implements SchemeFactory {
      public hset_resultTupleScheme getScheme() {
        return new hset_resultTupleScheme();
      }
    }

    private static class hset_resultTupleScheme extends TupleScheme<hset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hexists_args implements org.apache.thrift.TBase<hexists_args, hexists_args._Fields>, java.io.Serializable, Cloneable, Comparable<hexists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hexists_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hexists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hexists_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String field; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      FIELD((short)4, "field"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // FIELD
            return FIELD;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hexists_args.class, metaDataMap);
    }

    public hexists_args() {
    }

    public hexists_args(
      long logIndex,
      String caller,
      String key,
      String field,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.field = field;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hexists_args(hexists_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hexists_args deepCopy() {
      return new hexists_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.field = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hexists_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hexists_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hexists_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getField() {
      return this.field;
    }

    public hexists_args setField(String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hexists_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case FIELD:
        return getField();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case FIELD:
        return isSetField();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hexists_args)
        return this.equals((hexists_args)that);
      return false;
    }

    public boolean equals(hexists_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hexists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hexists_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hexists_argsStandardSchemeFactory implements SchemeFactory {
      public hexists_argsStandardScheme getScheme() {
        return new hexists_argsStandardScheme();
      }
    }

    private static class hexists_argsStandardScheme extends StandardScheme<hexists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hexists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hexists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hexists_argsTupleSchemeFactory implements SchemeFactory {
      public hexists_argsTupleScheme getScheme() {
        return new hexists_argsTupleScheme();
      }
    }

    private static class hexists_argsTupleScheme extends TupleScheme<hexists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hexists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetField()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hexists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hexists_result implements org.apache.thrift.TBase<hexists_result, hexists_result._Fields>, java.io.Serializable, Cloneable, Comparable<hexists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hexists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hexists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hexists_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hexists_result.class, metaDataMap);
    }

    public hexists_result() {
    }

    public hexists_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hexists_result(hexists_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public hexists_result deepCopy() {
      return new hexists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public hexists_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hexists_result)
        return this.equals((hexists_result)that);
      return false;
    }

    public boolean equals(hexists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hexists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hexists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hexists_resultStandardSchemeFactory implements SchemeFactory {
      public hexists_resultStandardScheme getScheme() {
        return new hexists_resultStandardScheme();
      }
    }

    private static class hexists_resultStandardScheme extends StandardScheme<hexists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hexists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hexists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hexists_resultTupleSchemeFactory implements SchemeFactory {
      public hexists_resultTupleScheme getScheme() {
        return new hexists_resultTupleScheme();
      }
    }

    private static class hexists_resultTupleScheme extends TupleScheme<hexists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hexists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hexists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hmset_args implements org.apache.thrift.TBase<hmset_args, hmset_args._Fields>, java.io.Serializable, Cloneable, Comparable<hmset_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hmset_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hmset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hmset_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public Map<String,String> hash; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      HASH((short)4, "hash"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // HASH
            return HASH;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hmset_args.class, metaDataMap);
    }

    public hmset_args() {
    }

    public hmset_args(
      long logIndex,
      String caller,
      String key,
      Map<String,String> hash,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.hash = hash;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hmset_args(hmset_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetHash()) {
        Map<String,String> __this__hash = new HashMap<String,String>(other.hash);
        this.hash = __this__hash;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hmset_args deepCopy() {
      return new hmset_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.hash = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hmset_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hmset_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hmset_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getHashSize() {
      return (this.hash == null) ? 0 : this.hash.size();
    }

    public void putToHash(String key, String val) {
      if (this.hash == null) {
        this.hash = new HashMap<String,String>();
      }
      this.hash.put(key, val);
    }

    public Map<String,String> getHash() {
      return this.hash;
    }

    public hmset_args setHash(Map<String,String> hash) {
      this.hash = hash;
      return this;
    }

    public void unsetHash() {
      this.hash = null;
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return this.hash != null;
    }

    public void setHashIsSet(boolean value) {
      if (!value) {
        this.hash = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hmset_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((Map<String,String>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case HASH:
        return getHash();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case HASH:
        return isSetHash();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hmset_args)
        return this.equals((hmset_args)that);
      return false;
    }

    public boolean equals(hmset_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_hash = true && this.isSetHash();
      boolean that_present_hash = true && that.isSetHash();
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (!this.hash.equals(that.hash))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_hash = true && (isSetHash());
      list.add(present_hash);
      if (present_hash)
        list.add(hash);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hmset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHash()).compareTo(other.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hmset_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hash:");
      if (this.hash == null) {
        sb.append("null");
      } else {
        sb.append(this.hash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hmset_argsStandardSchemeFactory implements SchemeFactory {
      public hmset_argsStandardScheme getScheme() {
        return new hmset_argsStandardScheme();
      }
    }

    private static class hmset_argsStandardScheme extends StandardScheme<hmset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hmset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.hash = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.hash.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hmset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.hash != null) {
          oprot.writeFieldBegin(HASH_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hash.size()));
            for (Map.Entry<String, String> _iter4 : struct.hash.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hmset_argsTupleSchemeFactory implements SchemeFactory {
      public hmset_argsTupleScheme getScheme() {
        return new hmset_argsTupleScheme();
      }
    }

    private static class hmset_argsTupleScheme extends TupleScheme<hmset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hmset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetHash()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetHash()) {
          {
            oprot.writeI32(struct.hash.size());
            for (Map.Entry<String, String> _iter5 : struct.hash.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hmset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hash = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.hash.put(_key7, _val8);
            }
          }
          struct.setHashIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hmset_result implements org.apache.thrift.TBase<hmset_result, hmset_result._Fields>, java.io.Serializable, Cloneable, Comparable<hmset_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hmset_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hmset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hmset_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hmset_result.class, metaDataMap);
    }

    public hmset_result() {
    }

    public hmset_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hmset_result(hmset_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public hmset_result deepCopy() {
      return new hmset_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public hmset_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hmset_result)
        return this.equals((hmset_result)that);
      return false;
    }

    public boolean equals(hmset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hmset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hmset_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hmset_resultStandardSchemeFactory implements SchemeFactory {
      public hmset_resultStandardScheme getScheme() {
        return new hmset_resultStandardScheme();
      }
    }

    private static class hmset_resultStandardScheme extends StandardScheme<hmset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hmset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hmset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hmset_resultTupleSchemeFactory implements SchemeFactory {
      public hmset_resultTupleScheme getScheme() {
        return new hmset_resultTupleScheme();
      }
    }

    private static class hmset_resultTupleScheme extends TupleScheme<hmset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hmset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hmset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hgetAll_args implements org.apache.thrift.TBase<hgetAll_args, hgetAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<hgetAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hgetAll_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hgetAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hgetAll_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hgetAll_args.class, metaDataMap);
    }

    public hgetAll_args() {
    }

    public hgetAll_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hgetAll_args(hgetAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hgetAll_args deepCopy() {
      return new hgetAll_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hgetAll_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hgetAll_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hgetAll_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hgetAll_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hgetAll_args)
        return this.equals((hgetAll_args)that);
      return false;
    }

    public boolean equals(hgetAll_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hgetAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hgetAll_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hgetAll_argsStandardSchemeFactory implements SchemeFactory {
      public hgetAll_argsStandardScheme getScheme() {
        return new hgetAll_argsStandardScheme();
      }
    }

    private static class hgetAll_argsStandardScheme extends StandardScheme<hgetAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hgetAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hgetAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hgetAll_argsTupleSchemeFactory implements SchemeFactory {
      public hgetAll_argsTupleScheme getScheme() {
        return new hgetAll_argsTupleScheme();
      }
    }

    private static class hgetAll_argsTupleScheme extends TupleScheme<hgetAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hgetAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hgetAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hgetAll_result implements org.apache.thrift.TBase<hgetAll_result, hgetAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<hgetAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hgetAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hgetAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hgetAll_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResMapStrStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResMapStrStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hgetAll_result.class, metaDataMap);
    }

    public hgetAll_result() {
    }

    public hgetAll_result(
      com.frc.thrift.datatype.ResMapStrStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hgetAll_result(hgetAll_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResMapStrStr(other.success);
      }
    }

    public hgetAll_result deepCopy() {
      return new hgetAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResMapStrStr getSuccess() {
      return this.success;
    }

    public hgetAll_result setSuccess(com.frc.thrift.datatype.ResMapStrStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResMapStrStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hgetAll_result)
        return this.equals((hgetAll_result)that);
      return false;
    }

    public boolean equals(hgetAll_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hgetAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hgetAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hgetAll_resultStandardSchemeFactory implements SchemeFactory {
      public hgetAll_resultStandardScheme getScheme() {
        return new hgetAll_resultStandardScheme();
      }
    }

    private static class hgetAll_resultStandardScheme extends StandardScheme<hgetAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hgetAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResMapStrStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hgetAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hgetAll_resultTupleSchemeFactory implements SchemeFactory {
      public hgetAll_resultTupleScheme getScheme() {
        return new hgetAll_resultTupleScheme();
      }
    }

    private static class hgetAll_resultTupleScheme extends TupleScheme<hgetAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hgetAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hgetAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResMapStrStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hmget_args implements org.apache.thrift.TBase<hmget_args, hmget_args._Fields>, java.io.Serializable, Cloneable, Comparable<hmget_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hmget_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hmget_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hmget_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public List<String> fields; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      FIELDS((short)4, "fields"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // FIELDS
            return FIELDS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hmget_args.class, metaDataMap);
    }

    public hmget_args() {
    }

    public hmget_args(
      long logIndex,
      String caller,
      String key,
      List<String> fields,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.fields = fields;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hmget_args(hmget_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetFields()) {
        List<String> __this__fields = new ArrayList<String>(other.fields);
        this.fields = __this__fields;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hmget_args deepCopy() {
      return new hmget_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.fields = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hmget_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hmget_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hmget_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getFieldsSize() {
      return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<String> getFieldsIterator() {
      return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(String elem) {
      if (this.fields == null) {
        this.fields = new ArrayList<String>();
      }
      this.fields.add(elem);
    }

    public List<String> getFields() {
      return this.fields;
    }

    public hmget_args setFields(List<String> fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hmget_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((List<String>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case FIELDS:
        return getFields();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case FIELDS:
        return isSetFields();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hmget_args)
        return this.equals((hmget_args)that);
      return false;
    }

    public boolean equals(hmget_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_fields = true && (isSetFields());
      list.add(present_fields);
      if (present_fields)
        list.add(fields);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hmget_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hmget_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hmget_argsStandardSchemeFactory implements SchemeFactory {
      public hmget_argsStandardScheme getScheme() {
        return new hmget_argsStandardScheme();
      }
    }

    private static class hmget_argsStandardScheme extends StandardScheme<hmget_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hmget_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.fields = new ArrayList<String>(_list10.size);
                  String _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = iprot.readString();
                    struct.fields.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hmget_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (String _iter13 : struct.fields)
            {
              oprot.writeString(_iter13);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hmget_argsTupleSchemeFactory implements SchemeFactory {
      public hmget_argsTupleScheme getScheme() {
        return new hmget_argsTupleScheme();
      }
    }

    private static class hmget_argsTupleScheme extends TupleScheme<hmget_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hmget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetFields()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetFields()) {
          {
            oprot.writeI32(struct.fields.size());
            for (String _iter14 : struct.fields)
            {
              oprot.writeString(_iter14);
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hmget_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fields = new ArrayList<String>(_list15.size);
            String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.fields.add(_elem16);
            }
          }
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hmget_result implements org.apache.thrift.TBase<hmget_result, hmget_result._Fields>, java.io.Serializable, Cloneable, Comparable<hmget_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hmget_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hmget_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hmget_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResListStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResListStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hmget_result.class, metaDataMap);
    }

    public hmget_result() {
    }

    public hmget_result(
      com.frc.thrift.datatype.ResListStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hmget_result(hmget_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResListStr(other.success);
      }
    }

    public hmget_result deepCopy() {
      return new hmget_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResListStr getSuccess() {
      return this.success;
    }

    public hmget_result setSuccess(com.frc.thrift.datatype.ResListStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResListStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hmget_result)
        return this.equals((hmget_result)that);
      return false;
    }

    public boolean equals(hmget_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hmget_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hmget_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hmget_resultStandardSchemeFactory implements SchemeFactory {
      public hmget_resultStandardScheme getScheme() {
        return new hmget_resultStandardScheme();
      }
    }

    private static class hmget_resultStandardScheme extends StandardScheme<hmget_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hmget_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResListStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hmget_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hmget_resultTupleSchemeFactory implements SchemeFactory {
      public hmget_resultTupleScheme getScheme() {
        return new hmget_resultTupleScheme();
      }
    }

    private static class hmget_resultTupleScheme extends TupleScheme<hmget_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hmget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hmget_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResListStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class hdel_args implements org.apache.thrift.TBase<hdel_args, hdel_args._Fields>, java.io.Serializable, Cloneable, Comparable<hdel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hdel_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hdel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hdel_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String field; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      FIELD((short)4, "field"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // FIELD
            return FIELD;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hdel_args.class, metaDataMap);
    }

    public hdel_args() {
    }

    public hdel_args(
      long logIndex,
      String caller,
      String key,
      String field,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.field = field;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hdel_args(hdel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public hdel_args deepCopy() {
      return new hdel_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.field = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public hdel_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public hdel_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public hdel_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getField() {
      return this.field;
    }

    public hdel_args setField(String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public hdel_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case FIELD:
        return getField();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case FIELD:
        return isSetField();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hdel_args)
        return this.equals((hdel_args)that);
      return false;
    }

    public boolean equals(hdel_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(hdel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hdel_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hdel_argsStandardSchemeFactory implements SchemeFactory {
      public hdel_argsStandardScheme getScheme() {
        return new hdel_argsStandardScheme();
      }
    }

    private static class hdel_argsStandardScheme extends StandardScheme<hdel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hdel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hdel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hdel_argsTupleSchemeFactory implements SchemeFactory {
      public hdel_argsTupleScheme getScheme() {
        return new hdel_argsTupleScheme();
      }
    }

    private static class hdel_argsTupleScheme extends TupleScheme<hdel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hdel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetField()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hdel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class hdel_result implements org.apache.thrift.TBase<hdel_result, hdel_result._Fields>, java.io.Serializable, Cloneable, Comparable<hdel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hdel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hdel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hdel_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hdel_result.class, metaDataMap);
    }

    public hdel_result() {
    }

    public hdel_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hdel_result(hdel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public hdel_result deepCopy() {
      return new hdel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public hdel_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hdel_result)
        return this.equals((hdel_result)that);
      return false;
    }

    public boolean equals(hdel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hdel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hdel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hdel_resultStandardSchemeFactory implements SchemeFactory {
      public hdel_resultStandardScheme getScheme() {
        return new hdel_resultStandardScheme();
      }
    }

    private static class hdel_resultStandardScheme extends StandardScheme<hdel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hdel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hdel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hdel_resultTupleSchemeFactory implements SchemeFactory {
      public hdel_resultTupleScheme getScheme() {
        return new hdel_resultTupleScheme();
      }
    }

    private static class hdel_resultTupleScheme extends TupleScheme<hdel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hdel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hdel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zadd_args implements org.apache.thrift.TBase<zadd_args, zadd_args._Fields>, java.io.Serializable, Cloneable, Comparable<zadd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zadd_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCORE_MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("scoreMembers", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zadd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zadd_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public Map<String,Double> scoreMembers; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      SCORE_MEMBERS((short)4, "scoreMembers"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // SCORE_MEMBERS
            return SCORE_MEMBERS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCORE_MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("scoreMembers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zadd_args.class, metaDataMap);
    }

    public zadd_args() {
    }

    public zadd_args(
      long logIndex,
      String caller,
      String key,
      Map<String,Double> scoreMembers,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.scoreMembers = scoreMembers;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zadd_args(zadd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetScoreMembers()) {
        Map<String,Double> __this__scoreMembers = new HashMap<String,Double>(other.scoreMembers);
        this.scoreMembers = __this__scoreMembers;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zadd_args deepCopy() {
      return new zadd_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.scoreMembers = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zadd_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zadd_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zadd_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getScoreMembersSize() {
      return (this.scoreMembers == null) ? 0 : this.scoreMembers.size();
    }

    public void putToScoreMembers(String key, double val) {
      if (this.scoreMembers == null) {
        this.scoreMembers = new HashMap<String,Double>();
      }
      this.scoreMembers.put(key, val);
    }

    public Map<String,Double> getScoreMembers() {
      return this.scoreMembers;
    }

    public zadd_args setScoreMembers(Map<String,Double> scoreMembers) {
      this.scoreMembers = scoreMembers;
      return this;
    }

    public void unsetScoreMembers() {
      this.scoreMembers = null;
    }

    /** Returns true if field scoreMembers is set (has been assigned a value) and false otherwise */
    public boolean isSetScoreMembers() {
      return this.scoreMembers != null;
    }

    public void setScoreMembersIsSet(boolean value) {
      if (!value) {
        this.scoreMembers = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zadd_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SCORE_MEMBERS:
        if (value == null) {
          unsetScoreMembers();
        } else {
          setScoreMembers((Map<String,Double>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case SCORE_MEMBERS:
        return getScoreMembers();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case SCORE_MEMBERS:
        return isSetScoreMembers();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zadd_args)
        return this.equals((zadd_args)that);
      return false;
    }

    public boolean equals(zadd_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_scoreMembers = true && this.isSetScoreMembers();
      boolean that_present_scoreMembers = true && that.isSetScoreMembers();
      if (this_present_scoreMembers || that_present_scoreMembers) {
        if (!(this_present_scoreMembers && that_present_scoreMembers))
          return false;
        if (!this.scoreMembers.equals(that.scoreMembers))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_scoreMembers = true && (isSetScoreMembers());
      list.add(present_scoreMembers);
      if (present_scoreMembers)
        list.add(scoreMembers);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zadd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScoreMembers()).compareTo(other.isSetScoreMembers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScoreMembers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scoreMembers, other.scoreMembers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zadd_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scoreMembers:");
      if (this.scoreMembers == null) {
        sb.append("null");
      } else {
        sb.append(this.scoreMembers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zadd_argsStandardSchemeFactory implements SchemeFactory {
      public zadd_argsStandardScheme getScheme() {
        return new zadd_argsStandardScheme();
      }
    }

    private static class zadd_argsStandardScheme extends StandardScheme<zadd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zadd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SCORE_MEMBERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.scoreMembers = new HashMap<String,Double>(2*_map18.size);
                  String _key19;
                  double _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readDouble();
                    struct.scoreMembers.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setScoreMembersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zadd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.scoreMembers != null) {
          oprot.writeFieldBegin(SCORE_MEMBERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.scoreMembers.size()));
            for (Map.Entry<String, Double> _iter22 : struct.scoreMembers.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeDouble(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zadd_argsTupleSchemeFactory implements SchemeFactory {
      public zadd_argsTupleScheme getScheme() {
        return new zadd_argsTupleScheme();
      }
    }

    private static class zadd_argsTupleScheme extends TupleScheme<zadd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zadd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetScoreMembers()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetScoreMembers()) {
          {
            oprot.writeI32(struct.scoreMembers.size());
            for (Map.Entry<String, Double> _iter23 : struct.scoreMembers.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeDouble(_iter23.getValue());
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zadd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.scoreMembers = new HashMap<String,Double>(2*_map24.size);
            String _key25;
            double _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readDouble();
              struct.scoreMembers.put(_key25, _val26);
            }
          }
          struct.setScoreMembersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zadd_result implements org.apache.thrift.TBase<zadd_result, zadd_result._Fields>, java.io.Serializable, Cloneable, Comparable<zadd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zadd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zadd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zadd_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zadd_result.class, metaDataMap);
    }

    public zadd_result() {
    }

    public zadd_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zadd_result(zadd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public zadd_result deepCopy() {
      return new zadd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public zadd_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zadd_result)
        return this.equals((zadd_result)that);
      return false;
    }

    public boolean equals(zadd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zadd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zadd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zadd_resultStandardSchemeFactory implements SchemeFactory {
      public zadd_resultStandardScheme getScheme() {
        return new zadd_resultStandardScheme();
      }
    }

    private static class zadd_resultStandardScheme extends StandardScheme<zadd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zadd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zadd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zadd_resultTupleSchemeFactory implements SchemeFactory {
      public zadd_resultTupleScheme getScheme() {
        return new zadd_resultTupleScheme();
      }
    }

    private static class zadd_resultTupleScheme extends TupleScheme<zadd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zadd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zadd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zaddmember_args implements org.apache.thrift.TBase<zaddmember_args, zaddmember_args._Fields>, java.io.Serializable, Cloneable, Comparable<zaddmember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zaddmember_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zaddmember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zaddmember_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public double score; // required
    public String member; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      SCORE((short)4, "score"),
      MEMBER((short)5, "member"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // SCORE
            return SCORE;
          case 5: // MEMBER
            return MEMBER;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __SCORE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zaddmember_args.class, metaDataMap);
    }

    public zaddmember_args() {
    }

    public zaddmember_args(
      long logIndex,
      String caller,
      String key,
      double score,
      String member,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.score = score;
      setScoreIsSet(true);
      this.member = member;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zaddmember_args(zaddmember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.score = other.score;
      if (other.isSetMember()) {
        this.member = other.member;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zaddmember_args deepCopy() {
      return new zaddmember_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setScoreIsSet(false);
      this.score = 0.0;
      this.member = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zaddmember_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zaddmember_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zaddmember_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public double getScore() {
      return this.score;
    }

    public zaddmember_args setScore(double score) {
      this.score = score;
      setScoreIsSet(true);
      return this;
    }

    public void unsetScore() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
    }

    /** Returns true if field score is set (has been assigned a value) and false otherwise */
    public boolean isSetScore() {
      return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
    }

    public void setScoreIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
    }

    public String getMember() {
      return this.member;
    }

    public zaddmember_args setMember(String member) {
      this.member = member;
      return this;
    }

    public void unsetMember() {
      this.member = null;
    }

    /** Returns true if field member is set (has been assigned a value) and false otherwise */
    public boolean isSetMember() {
      return this.member != null;
    }

    public void setMemberIsSet(boolean value) {
      if (!value) {
        this.member = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zaddmember_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SCORE:
        if (value == null) {
          unsetScore();
        } else {
          setScore((Double)value);
        }
        break;

      case MEMBER:
        if (value == null) {
          unsetMember();
        } else {
          setMember((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case SCORE:
        return getScore();

      case MEMBER:
        return getMember();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case SCORE:
        return isSetScore();
      case MEMBER:
        return isSetMember();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zaddmember_args)
        return this.equals((zaddmember_args)that);
      return false;
    }

    public boolean equals(zaddmember_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_score = true;
      boolean that_present_score = true;
      if (this_present_score || that_present_score) {
        if (!(this_present_score && that_present_score))
          return false;
        if (this.score != that.score)
          return false;
      }

      boolean this_present_member = true && this.isSetMember();
      boolean that_present_member = true && that.isSetMember();
      if (this_present_member || that_present_member) {
        if (!(this_present_member && that_present_member))
          return false;
        if (!this.member.equals(that.member))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_score = true;
      list.add(present_score);
      if (present_score)
        list.add(score);

      boolean present_member = true && (isSetMember());
      list.add(present_member);
      if (present_member)
        list.add(member);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zaddmember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zaddmember_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
      if (!first) sb.append(", ");
      sb.append("member:");
      if (this.member == null) {
        sb.append("null");
      } else {
        sb.append(this.member);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zaddmember_argsStandardSchemeFactory implements SchemeFactory {
      public zaddmember_argsStandardScheme getScheme() {
        return new zaddmember_argsStandardScheme();
      }
    }

    private static class zaddmember_argsStandardScheme extends StandardScheme<zaddmember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zaddmember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.score = iprot.readDouble();
                struct.setScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.member = iprot.readString();
                struct.setMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zaddmember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
        if (struct.member != null) {
          oprot.writeFieldBegin(MEMBER_FIELD_DESC);
          oprot.writeString(struct.member);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zaddmember_argsTupleSchemeFactory implements SchemeFactory {
      public zaddmember_argsTupleScheme getScheme() {
        return new zaddmember_argsTupleScheme();
      }
    }

    private static class zaddmember_argsTupleScheme extends TupleScheme<zaddmember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zaddmember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetScore()) {
          optionals.set(3);
        }
        if (struct.isSetMember()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetScore()) {
          oprot.writeDouble(struct.score);
        }
        if (struct.isSetMember()) {
          oprot.writeString(struct.member);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zaddmember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.score = iprot.readDouble();
          struct.setScoreIsSet(true);
        }
        if (incoming.get(4)) {
          struct.member = iprot.readString();
          struct.setMemberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zaddmember_result implements org.apache.thrift.TBase<zaddmember_result, zaddmember_result._Fields>, java.io.Serializable, Cloneable, Comparable<zaddmember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zaddmember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zaddmember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zaddmember_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zaddmember_result.class, metaDataMap);
    }

    public zaddmember_result() {
    }

    public zaddmember_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zaddmember_result(zaddmember_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public zaddmember_result deepCopy() {
      return new zaddmember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public zaddmember_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zaddmember_result)
        return this.equals((zaddmember_result)that);
      return false;
    }

    public boolean equals(zaddmember_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zaddmember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zaddmember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zaddmember_resultStandardSchemeFactory implements SchemeFactory {
      public zaddmember_resultStandardScheme getScheme() {
        return new zaddmember_resultStandardScheme();
      }
    }

    private static class zaddmember_resultStandardScheme extends StandardScheme<zaddmember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zaddmember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zaddmember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zaddmember_resultTupleSchemeFactory implements SchemeFactory {
      public zaddmember_resultTupleScheme getScheme() {
        return new zaddmember_resultTupleScheme();
      }
    }

    private static class zaddmember_resultTupleScheme extends TupleScheme<zaddmember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zaddmember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zaddmember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrem_args implements org.apache.thrift.TBase<zrem_args, zrem_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrem_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("members", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrem_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public List<String> members; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      MEMBERS((short)4, "members"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // MEMBERS
            return MEMBERS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("members", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrem_args.class, metaDataMap);
    }

    public zrem_args() {
    }

    public zrem_args(
      long logIndex,
      String caller,
      String key,
      List<String> members,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.members = members;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrem_args(zrem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetMembers()) {
        List<String> __this__members = new ArrayList<String>(other.members);
        this.members = __this__members;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrem_args deepCopy() {
      return new zrem_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.members = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrem_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrem_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrem_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getMembersSize() {
      return (this.members == null) ? 0 : this.members.size();
    }

    public java.util.Iterator<String> getMembersIterator() {
      return (this.members == null) ? null : this.members.iterator();
    }

    public void addToMembers(String elem) {
      if (this.members == null) {
        this.members = new ArrayList<String>();
      }
      this.members.add(elem);
    }

    public List<String> getMembers() {
      return this.members;
    }

    public zrem_args setMembers(List<String> members) {
      this.members = members;
      return this;
    }

    public void unsetMembers() {
      this.members = null;
    }

    /** Returns true if field members is set (has been assigned a value) and false otherwise */
    public boolean isSetMembers() {
      return this.members != null;
    }

    public void setMembersIsSet(boolean value) {
      if (!value) {
        this.members = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zrem_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          setMembers((List<String>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case MEMBERS:
        return getMembers();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case MEMBERS:
        return isSetMembers();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrem_args)
        return this.equals((zrem_args)that);
      return false;
    }

    public boolean equals(zrem_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_members = true && this.isSetMembers();
      boolean that_present_members = true && that.isSetMembers();
      if (this_present_members || that_present_members) {
        if (!(this_present_members && that_present_members))
          return false;
        if (!this.members.equals(that.members))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_members = true && (isSetMembers());
      list.add(present_members);
      if (present_members)
        list.add(members);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMembers()).compareTo(other.isSetMembers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMembers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.members, other.members);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrem_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("members:");
      if (this.members == null) {
        sb.append("null");
      } else {
        sb.append(this.members);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrem_argsStandardSchemeFactory implements SchemeFactory {
      public zrem_argsStandardScheme getScheme() {
        return new zrem_argsStandardScheme();
      }
    }

    private static class zrem_argsStandardScheme extends StandardScheme<zrem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEMBERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.members = new ArrayList<String>(_list28.size);
                  String _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = iprot.readString();
                    struct.members.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setMembersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.members != null) {
          oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.members.size()));
            for (String _iter31 : struct.members)
            {
              oprot.writeString(_iter31);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrem_argsTupleSchemeFactory implements SchemeFactory {
      public zrem_argsTupleScheme getScheme() {
        return new zrem_argsTupleScheme();
      }
    }

    private static class zrem_argsTupleScheme extends TupleScheme<zrem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetMembers()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetMembers()) {
          {
            oprot.writeI32(struct.members.size());
            for (String _iter32 : struct.members)
            {
              oprot.writeString(_iter32);
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.members = new ArrayList<String>(_list33.size);
            String _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = iprot.readString();
              struct.members.add(_elem34);
            }
          }
          struct.setMembersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrem_result implements org.apache.thrift.TBase<zrem_result, zrem_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrem_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrem_result.class, metaDataMap);
    }

    public zrem_result() {
    }

    public zrem_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrem_result(zrem_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public zrem_result deepCopy() {
      return new zrem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public zrem_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrem_result)
        return this.equals((zrem_result)that);
      return false;
    }

    public boolean equals(zrem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrem_resultStandardSchemeFactory implements SchemeFactory {
      public zrem_resultStandardScheme getScheme() {
        return new zrem_resultStandardScheme();
      }
    }

    private static class zrem_resultStandardScheme extends StandardScheme<zrem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrem_resultTupleSchemeFactory implements SchemeFactory {
      public zrem_resultTupleScheme getScheme() {
        return new zrem_resultTupleScheme();
      }
    }

    private static class zrem_resultTupleScheme extends TupleScheme<zrem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrange_args implements org.apache.thrift.TBase<zrange_args, zrange_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrange_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ends", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrange_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public long start; // required
    public long ends; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      START((short)4, "start"),
      ENDS((short)5, "ends"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // START
            return START;
          case 5: // ENDS
            return ENDS;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __ENDS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENDS, new org.apache.thrift.meta_data.FieldMetaData("ends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrange_args.class, metaDataMap);
    }

    public zrange_args() {
    }

    public zrange_args(
      long logIndex,
      String caller,
      String key,
      long start,
      long ends,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.start = start;
      setStartIsSet(true);
      this.ends = ends;
      setEndsIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrange_args(zrange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.start = other.start;
      this.ends = other.ends;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrange_args deepCopy() {
      return new zrange_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setStartIsSet(false);
      this.start = 0;
      setEndsIsSet(false);
      this.ends = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrange_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrange_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrange_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public zrange_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnds() {
      return this.ends;
    }

    public zrange_args setEnds(long ends) {
      this.ends = ends;
      setEndsIsSet(true);
      return this;
    }

    public void unsetEnds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    /** Returns true if field ends is set (has been assigned a value) and false otherwise */
    public boolean isSetEnds() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    public void setEndsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDS_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public zrange_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case ENDS:
        if (value == null) {
          unsetEnds();
        } else {
          setEnds((Long)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case START:
        return getStart();

      case ENDS:
        return getEnds();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case START:
        return isSetStart();
      case ENDS:
        return isSetEnds();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrange_args)
        return this.equals((zrange_args)that);
      return false;
    }

    public boolean equals(zrange_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_ends = true;
      boolean that_present_ends = true;
      if (this_present_ends || that_present_ends) {
        if (!(this_present_ends && that_present_ends))
          return false;
        if (this.ends != that.ends)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_ends = true;
      list.add(present_ends);
      if (present_ends)
        list.add(ends);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnds()).compareTo(other.isSetEnds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ends, other.ends);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrange_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ends:");
      sb.append(this.ends);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrange_argsStandardSchemeFactory implements SchemeFactory {
      public zrange_argsStandardScheme getScheme() {
        return new zrange_argsStandardScheme();
      }
    }

    private static class zrange_argsStandardScheme extends StandardScheme<zrange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ends = iprot.readI64();
                struct.setEndsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDS_FIELD_DESC);
        oprot.writeI64(struct.ends);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrange_argsTupleSchemeFactory implements SchemeFactory {
      public zrange_argsTupleScheme getScheme() {
        return new zrange_argsTupleScheme();
      }
    }

    private static class zrange_argsTupleScheme extends TupleScheme<zrange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnds()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnds()) {
          oprot.writeI64(struct.ends);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ends = iprot.readI64();
          struct.setEndsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrange_result implements org.apache.thrift.TBase<zrange_result, zrange_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrange_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResSetStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResSetStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrange_result.class, metaDataMap);
    }

    public zrange_result() {
    }

    public zrange_result(
      com.frc.thrift.datatype.ResSetStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrange_result(zrange_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResSetStr(other.success);
      }
    }

    public zrange_result deepCopy() {
      return new zrange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResSetStr getSuccess() {
      return this.success;
    }

    public zrange_result setSuccess(com.frc.thrift.datatype.ResSetStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResSetStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrange_result)
        return this.equals((zrange_result)that);
      return false;
    }

    public boolean equals(zrange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrange_resultStandardSchemeFactory implements SchemeFactory {
      public zrange_resultStandardScheme getScheme() {
        return new zrange_resultStandardScheme();
      }
    }

    private static class zrange_resultStandardScheme extends StandardScheme<zrange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResSetStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrange_resultTupleSchemeFactory implements SchemeFactory {
      public zrange_resultTupleScheme getScheme() {
        return new zrange_resultTupleScheme();
      }
    }

    private static class zrange_resultTupleScheme extends TupleScheme<zrange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResSetStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrevrange_args implements org.apache.thrift.TBase<zrevrange_args, zrevrange_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrange_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ends", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrange_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public long start; // required
    public long ends; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      START((short)4, "start"),
      ENDS((short)5, "ends"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // START
            return START;
          case 5: // ENDS
            return ENDS;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __ENDS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENDS, new org.apache.thrift.meta_data.FieldMetaData("ends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrange_args.class, metaDataMap);
    }

    public zrevrange_args() {
    }

    public zrevrange_args(
      long logIndex,
      String caller,
      String key,
      long start,
      long ends,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.start = start;
      setStartIsSet(true);
      this.ends = ends;
      setEndsIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrange_args(zrevrange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.start = other.start;
      this.ends = other.ends;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrevrange_args deepCopy() {
      return new zrevrange_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setStartIsSet(false);
      this.start = 0;
      setEndsIsSet(false);
      this.ends = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrevrange_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrevrange_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrevrange_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public zrevrange_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnds() {
      return this.ends;
    }

    public zrevrange_args setEnds(long ends) {
      this.ends = ends;
      setEndsIsSet(true);
      return this;
    }

    public void unsetEnds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    /** Returns true if field ends is set (has been assigned a value) and false otherwise */
    public boolean isSetEnds() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    public void setEndsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDS_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public zrevrange_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case ENDS:
        if (value == null) {
          unsetEnds();
        } else {
          setEnds((Long)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case START:
        return getStart();

      case ENDS:
        return getEnds();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case START:
        return isSetStart();
      case ENDS:
        return isSetEnds();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrange_args)
        return this.equals((zrevrange_args)that);
      return false;
    }

    public boolean equals(zrevrange_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_ends = true;
      boolean that_present_ends = true;
      if (this_present_ends || that_present_ends) {
        if (!(this_present_ends && that_present_ends))
          return false;
        if (this.ends != that.ends)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_ends = true;
      list.add(present_ends);
      if (present_ends)
        list.add(ends);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnds()).compareTo(other.isSetEnds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ends, other.ends);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrange_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ends:");
      sb.append(this.ends);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrange_argsStandardSchemeFactory implements SchemeFactory {
      public zrevrange_argsStandardScheme getScheme() {
        return new zrevrange_argsStandardScheme();
      }
    }

    private static class zrevrange_argsStandardScheme extends StandardScheme<zrevrange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ends = iprot.readI64();
                struct.setEndsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDS_FIELD_DESC);
        oprot.writeI64(struct.ends);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrange_argsTupleSchemeFactory implements SchemeFactory {
      public zrevrange_argsTupleScheme getScheme() {
        return new zrevrange_argsTupleScheme();
      }
    }

    private static class zrevrange_argsTupleScheme extends TupleScheme<zrevrange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnds()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnds()) {
          oprot.writeI64(struct.ends);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ends = iprot.readI64();
          struct.setEndsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrevrange_result implements org.apache.thrift.TBase<zrevrange_result, zrevrange_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrange_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResSetStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResSetStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrange_result.class, metaDataMap);
    }

    public zrevrange_result() {
    }

    public zrevrange_result(
      com.frc.thrift.datatype.ResSetStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrange_result(zrevrange_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResSetStr(other.success);
      }
    }

    public zrevrange_result deepCopy() {
      return new zrevrange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResSetStr getSuccess() {
      return this.success;
    }

    public zrevrange_result setSuccess(com.frc.thrift.datatype.ResSetStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResSetStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrange_result)
        return this.equals((zrevrange_result)that);
      return false;
    }

    public boolean equals(zrevrange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrange_resultStandardSchemeFactory implements SchemeFactory {
      public zrevrange_resultStandardScheme getScheme() {
        return new zrevrange_resultStandardScheme();
      }
    }

    private static class zrevrange_resultStandardScheme extends StandardScheme<zrevrange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResSetStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrange_resultTupleSchemeFactory implements SchemeFactory {
      public zrevrange_resultTupleScheme getScheme() {
        return new zrevrange_resultTupleScheme();
      }
    }

    private static class zrevrange_resultTupleScheme extends TupleScheme<zrevrange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResSetStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrevrangeByScore_args implements org.apache.thrift.TBase<zrevrangeByScore_args, zrevrangeByScore_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrangeByScore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrangeByScore_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ends", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrangeByScore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrangeByScore_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public long start; // required
    public long ends; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      START((short)4, "start"),
      ENDS((short)5, "ends"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // START
            return START;
          case 5: // ENDS
            return ENDS;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __ENDS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENDS, new org.apache.thrift.meta_data.FieldMetaData("ends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrangeByScore_args.class, metaDataMap);
    }

    public zrevrangeByScore_args() {
    }

    public zrevrangeByScore_args(
      long logIndex,
      String caller,
      String key,
      long start,
      long ends,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.start = start;
      setStartIsSet(true);
      this.ends = ends;
      setEndsIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrangeByScore_args(zrevrangeByScore_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.start = other.start;
      this.ends = other.ends;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrevrangeByScore_args deepCopy() {
      return new zrevrangeByScore_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setStartIsSet(false);
      this.start = 0;
      setEndsIsSet(false);
      this.ends = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrevrangeByScore_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrevrangeByScore_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrevrangeByScore_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public zrevrangeByScore_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnds() {
      return this.ends;
    }

    public zrevrangeByScore_args setEnds(long ends) {
      this.ends = ends;
      setEndsIsSet(true);
      return this;
    }

    public void unsetEnds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    /** Returns true if field ends is set (has been assigned a value) and false otherwise */
    public boolean isSetEnds() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    public void setEndsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDS_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public zrevrangeByScore_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case ENDS:
        if (value == null) {
          unsetEnds();
        } else {
          setEnds((Long)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case START:
        return getStart();

      case ENDS:
        return getEnds();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case START:
        return isSetStart();
      case ENDS:
        return isSetEnds();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrangeByScore_args)
        return this.equals((zrevrangeByScore_args)that);
      return false;
    }

    public boolean equals(zrevrangeByScore_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_ends = true;
      boolean that_present_ends = true;
      if (this_present_ends || that_present_ends) {
        if (!(this_present_ends && that_present_ends))
          return false;
        if (this.ends != that.ends)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_ends = true;
      list.add(present_ends);
      if (present_ends)
        list.add(ends);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrangeByScore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnds()).compareTo(other.isSetEnds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ends, other.ends);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrangeByScore_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ends:");
      sb.append(this.ends);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrangeByScore_argsStandardSchemeFactory implements SchemeFactory {
      public zrevrangeByScore_argsStandardScheme getScheme() {
        return new zrevrangeByScore_argsStandardScheme();
      }
    }

    private static class zrevrangeByScore_argsStandardScheme extends StandardScheme<zrevrangeByScore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrangeByScore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ends = iprot.readI64();
                struct.setEndsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrangeByScore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDS_FIELD_DESC);
        oprot.writeI64(struct.ends);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrangeByScore_argsTupleSchemeFactory implements SchemeFactory {
      public zrevrangeByScore_argsTupleScheme getScheme() {
        return new zrevrangeByScore_argsTupleScheme();
      }
    }

    private static class zrevrangeByScore_argsTupleScheme extends TupleScheme<zrevrangeByScore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrangeByScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnds()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnds()) {
          oprot.writeI64(struct.ends);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrangeByScore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ends = iprot.readI64();
          struct.setEndsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrevrangeByScore_result implements org.apache.thrift.TBase<zrevrangeByScore_result, zrevrangeByScore_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrangeByScore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrangeByScore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrangeByScore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrangeByScore_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResSetStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResSetStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrangeByScore_result.class, metaDataMap);
    }

    public zrevrangeByScore_result() {
    }

    public zrevrangeByScore_result(
      com.frc.thrift.datatype.ResSetStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrangeByScore_result(zrevrangeByScore_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResSetStr(other.success);
      }
    }

    public zrevrangeByScore_result deepCopy() {
      return new zrevrangeByScore_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResSetStr getSuccess() {
      return this.success;
    }

    public zrevrangeByScore_result setSuccess(com.frc.thrift.datatype.ResSetStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResSetStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrangeByScore_result)
        return this.equals((zrevrangeByScore_result)that);
      return false;
    }

    public boolean equals(zrevrangeByScore_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrangeByScore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrangeByScore_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrangeByScore_resultStandardSchemeFactory implements SchemeFactory {
      public zrevrangeByScore_resultStandardScheme getScheme() {
        return new zrevrangeByScore_resultStandardScheme();
      }
    }

    private static class zrevrangeByScore_resultStandardScheme extends StandardScheme<zrevrangeByScore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrangeByScore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResSetStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrangeByScore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrangeByScore_resultTupleSchemeFactory implements SchemeFactory {
      public zrevrangeByScore_resultTupleScheme getScheme() {
        return new zrevrangeByScore_resultTupleScheme();
      }
    }

    private static class zrevrangeByScore_resultTupleScheme extends TupleScheme<zrevrangeByScore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrangeByScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrangeByScore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResSetStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zscore_args implements org.apache.thrift.TBase<zscore_args, zscore_args._Fields>, java.io.Serializable, Cloneable, Comparable<zscore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zscore_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zscore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zscore_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String member; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      MEMBER((short)4, "member"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // MEMBER
            return MEMBER;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zscore_args.class, metaDataMap);
    }

    public zscore_args() {
    }

    public zscore_args(
      long logIndex,
      String caller,
      String key,
      String member,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.member = member;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zscore_args(zscore_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetMember()) {
        this.member = other.member;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zscore_args deepCopy() {
      return new zscore_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.member = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zscore_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zscore_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zscore_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getMember() {
      return this.member;
    }

    public zscore_args setMember(String member) {
      this.member = member;
      return this;
    }

    public void unsetMember() {
      this.member = null;
    }

    /** Returns true if field member is set (has been assigned a value) and false otherwise */
    public boolean isSetMember() {
      return this.member != null;
    }

    public void setMemberIsSet(boolean value) {
      if (!value) {
        this.member = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zscore_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case MEMBER:
        if (value == null) {
          unsetMember();
        } else {
          setMember((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case MEMBER:
        return getMember();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case MEMBER:
        return isSetMember();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zscore_args)
        return this.equals((zscore_args)that);
      return false;
    }

    public boolean equals(zscore_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_member = true && this.isSetMember();
      boolean that_present_member = true && that.isSetMember();
      if (this_present_member || that_present_member) {
        if (!(this_present_member && that_present_member))
          return false;
        if (!this.member.equals(that.member))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_member = true && (isSetMember());
      list.add(present_member);
      if (present_member)
        list.add(member);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zscore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zscore_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("member:");
      if (this.member == null) {
        sb.append("null");
      } else {
        sb.append(this.member);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zscore_argsStandardSchemeFactory implements SchemeFactory {
      public zscore_argsStandardScheme getScheme() {
        return new zscore_argsStandardScheme();
      }
    }

    private static class zscore_argsStandardScheme extends StandardScheme<zscore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zscore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.member = iprot.readString();
                struct.setMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zscore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.member != null) {
          oprot.writeFieldBegin(MEMBER_FIELD_DESC);
          oprot.writeString(struct.member);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zscore_argsTupleSchemeFactory implements SchemeFactory {
      public zscore_argsTupleScheme getScheme() {
        return new zscore_argsTupleScheme();
      }
    }

    private static class zscore_argsTupleScheme extends TupleScheme<zscore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zscore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetMember()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetMember()) {
          oprot.writeString(struct.member);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zscore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.member = iprot.readString();
          struct.setMemberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zscore_result implements org.apache.thrift.TBase<zscore_result, zscore_result._Fields>, java.io.Serializable, Cloneable, Comparable<zscore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zscore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zscore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zscore_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResDouble success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResDouble.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zscore_result.class, metaDataMap);
    }

    public zscore_result() {
    }

    public zscore_result(
      com.frc.thrift.datatype.ResDouble success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zscore_result(zscore_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResDouble(other.success);
      }
    }

    public zscore_result deepCopy() {
      return new zscore_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResDouble getSuccess() {
      return this.success;
    }

    public zscore_result setSuccess(com.frc.thrift.datatype.ResDouble success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResDouble)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zscore_result)
        return this.equals((zscore_result)that);
      return false;
    }

    public boolean equals(zscore_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zscore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zscore_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zscore_resultStandardSchemeFactory implements SchemeFactory {
      public zscore_resultStandardScheme getScheme() {
        return new zscore_resultStandardScheme();
      }
    }

    private static class zscore_resultStandardScheme extends StandardScheme<zscore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zscore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResDouble();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zscore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zscore_resultTupleSchemeFactory implements SchemeFactory {
      public zscore_resultTupleScheme getScheme() {
        return new zscore_resultTupleScheme();
      }
    }

    private static class zscore_resultTupleScheme extends TupleScheme<zscore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zscore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zscore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResDouble();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrevrank_args implements org.apache.thrift.TBase<zrevrank_args, zrevrank_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrank_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrank_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String member; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      MEMBER((short)4, "member"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // MEMBER
            return MEMBER;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrank_args.class, metaDataMap);
    }

    public zrevrank_args() {
    }

    public zrevrank_args(
      long logIndex,
      String caller,
      String key,
      String member,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.member = member;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrank_args(zrevrank_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetMember()) {
        this.member = other.member;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrevrank_args deepCopy() {
      return new zrevrank_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.member = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrevrank_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrevrank_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrevrank_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getMember() {
      return this.member;
    }

    public zrevrank_args setMember(String member) {
      this.member = member;
      return this;
    }

    public void unsetMember() {
      this.member = null;
    }

    /** Returns true if field member is set (has been assigned a value) and false otherwise */
    public boolean isSetMember() {
      return this.member != null;
    }

    public void setMemberIsSet(boolean value) {
      if (!value) {
        this.member = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zrevrank_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case MEMBER:
        if (value == null) {
          unsetMember();
        } else {
          setMember((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case MEMBER:
        return getMember();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case MEMBER:
        return isSetMember();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrank_args)
        return this.equals((zrevrank_args)that);
      return false;
    }

    public boolean equals(zrevrank_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_member = true && this.isSetMember();
      boolean that_present_member = true && that.isSetMember();
      if (this_present_member || that_present_member) {
        if (!(this_present_member && that_present_member))
          return false;
        if (!this.member.equals(that.member))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_member = true && (isSetMember());
      list.add(present_member);
      if (present_member)
        list.add(member);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrank_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("member:");
      if (this.member == null) {
        sb.append("null");
      } else {
        sb.append(this.member);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrank_argsStandardSchemeFactory implements SchemeFactory {
      public zrevrank_argsStandardScheme getScheme() {
        return new zrevrank_argsStandardScheme();
      }
    }

    private static class zrevrank_argsStandardScheme extends StandardScheme<zrevrank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.member = iprot.readString();
                struct.setMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.member != null) {
          oprot.writeFieldBegin(MEMBER_FIELD_DESC);
          oprot.writeString(struct.member);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrank_argsTupleSchemeFactory implements SchemeFactory {
      public zrevrank_argsTupleScheme getScheme() {
        return new zrevrank_argsTupleScheme();
      }
    }

    private static class zrevrank_argsTupleScheme extends TupleScheme<zrevrank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetMember()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetMember()) {
          oprot.writeString(struct.member);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.member = iprot.readString();
          struct.setMemberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrevrank_result implements org.apache.thrift.TBase<zrevrank_result, zrevrank_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrevrank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrevrank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrevrank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrevrank_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResLong success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResLong.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrevrank_result.class, metaDataMap);
    }

    public zrevrank_result() {
    }

    public zrevrank_result(
      com.frc.thrift.datatype.ResLong success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrevrank_result(zrevrank_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResLong(other.success);
      }
    }

    public zrevrank_result deepCopy() {
      return new zrevrank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResLong getSuccess() {
      return this.success;
    }

    public zrevrank_result setSuccess(com.frc.thrift.datatype.ResLong success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResLong)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrevrank_result)
        return this.equals((zrevrank_result)that);
      return false;
    }

    public boolean equals(zrevrank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrevrank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrevrank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrevrank_resultStandardSchemeFactory implements SchemeFactory {
      public zrevrank_resultStandardScheme getScheme() {
        return new zrevrank_resultStandardScheme();
      }
    }

    private static class zrevrank_resultStandardScheme extends StandardScheme<zrevrank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrevrank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResLong();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrevrank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrevrank_resultTupleSchemeFactory implements SchemeFactory {
      public zrevrank_resultTupleScheme getScheme() {
        return new zrevrank_resultTupleScheme();
      }
    }

    private static class zrevrank_resultTupleScheme extends TupleScheme<zrevrank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrevrank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrevrank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResLong();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class zrank_args implements org.apache.thrift.TBase<zrank_args, zrank_args._Fields>, java.io.Serializable, Cloneable, Comparable<zrank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrank_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrank_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrank_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String member; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      MEMBER((short)4, "member"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // MEMBER
            return MEMBER;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrank_args.class, metaDataMap);
    }

    public zrank_args() {
    }

    public zrank_args(
      long logIndex,
      String caller,
      String key,
      String member,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.member = member;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrank_args(zrank_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetMember()) {
        this.member = other.member;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public zrank_args deepCopy() {
      return new zrank_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.member = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public zrank_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public zrank_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public zrank_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getMember() {
      return this.member;
    }

    public zrank_args setMember(String member) {
      this.member = member;
      return this;
    }

    public void unsetMember() {
      this.member = null;
    }

    /** Returns true if field member is set (has been assigned a value) and false otherwise */
    public boolean isSetMember() {
      return this.member != null;
    }

    public void setMemberIsSet(boolean value) {
      if (!value) {
        this.member = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public zrank_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case MEMBER:
        if (value == null) {
          unsetMember();
        } else {
          setMember((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case MEMBER:
        return getMember();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case MEMBER:
        return isSetMember();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrank_args)
        return this.equals((zrank_args)that);
      return false;
    }

    public boolean equals(zrank_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_member = true && this.isSetMember();
      boolean that_present_member = true && that.isSetMember();
      if (this_present_member || that_present_member) {
        if (!(this_present_member && that_present_member))
          return false;
        if (!this.member.equals(that.member))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_member = true && (isSetMember());
      list.add(present_member);
      if (present_member)
        list.add(member);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMember()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrank_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("member:");
      if (this.member == null) {
        sb.append("null");
      } else {
        sb.append(this.member);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrank_argsStandardSchemeFactory implements SchemeFactory {
      public zrank_argsStandardScheme getScheme() {
        return new zrank_argsStandardScheme();
      }
    }

    private static class zrank_argsStandardScheme extends StandardScheme<zrank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.member = iprot.readString();
                struct.setMemberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.member != null) {
          oprot.writeFieldBegin(MEMBER_FIELD_DESC);
          oprot.writeString(struct.member);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrank_argsTupleSchemeFactory implements SchemeFactory {
      public zrank_argsTupleScheme getScheme() {
        return new zrank_argsTupleScheme();
      }
    }

    private static class zrank_argsTupleScheme extends TupleScheme<zrank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetMember()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetMember()) {
          oprot.writeString(struct.member);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrank_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.member = iprot.readString();
          struct.setMemberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class zrank_result implements org.apache.thrift.TBase<zrank_result, zrank_result._Fields>, java.io.Serializable, Cloneable, Comparable<zrank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zrank_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zrank_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zrank_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResLong success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResLong.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zrank_result.class, metaDataMap);
    }

    public zrank_result() {
    }

    public zrank_result(
      com.frc.thrift.datatype.ResLong success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zrank_result(zrank_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResLong(other.success);
      }
    }

    public zrank_result deepCopy() {
      return new zrank_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResLong getSuccess() {
      return this.success;
    }

    public zrank_result setSuccess(com.frc.thrift.datatype.ResLong success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResLong)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zrank_result)
        return this.equals((zrank_result)that);
      return false;
    }

    public boolean equals(zrank_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(zrank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zrank_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zrank_resultStandardSchemeFactory implements SchemeFactory {
      public zrank_resultStandardScheme getScheme() {
        return new zrank_resultStandardScheme();
      }
    }

    private static class zrank_resultStandardScheme extends StandardScheme<zrank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zrank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResLong();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zrank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zrank_resultTupleSchemeFactory implements SchemeFactory {
      public zrank_resultTupleScheme getScheme() {
        return new zrank_resultTupleScheme();
      }
    }

    private static class zrank_resultTupleScheme extends TupleScheme<zrank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zrank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zrank_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResLong();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exists_args implements org.apache.thrift.TBase<exists_args, exists_args._Fields>, java.io.Serializable, Cloneable, Comparable<exists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exists_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_args.class, metaDataMap);
    }

    public exists_args() {
    }

    public exists_args(
      long logIndex,
      String caller,
      String key,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_args(exists_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public exists_args deepCopy() {
      return new exists_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public exists_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public exists_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public exists_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public exists_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_args)
        return this.equals((exists_args)that);
      return false;
    }

    public boolean equals(exists_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exists_argsStandardSchemeFactory implements SchemeFactory {
      public exists_argsStandardScheme getScheme() {
        return new exists_argsStandardScheme();
      }
    }

    private static class exists_argsStandardScheme extends StandardScheme<exists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exists_argsTupleSchemeFactory implements SchemeFactory {
      public exists_argsTupleScheme getScheme() {
        return new exists_argsTupleScheme();
      }
    }

    private static class exists_argsTupleScheme extends TupleScheme<exists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class exists_result implements org.apache.thrift.TBase<exists_result, exists_result._Fields>, java.io.Serializable, Cloneable, Comparable<exists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exists_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_result.class, metaDataMap);
    }

    public exists_result() {
    }

    public exists_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_result(exists_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public exists_result deepCopy() {
      return new exists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public exists_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_result)
        return this.equals((exists_result)that);
      return false;
    }

    public boolean equals(exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exists_resultStandardSchemeFactory implements SchemeFactory {
      public exists_resultStandardScheme getScheme() {
        return new exists_resultStandardScheme();
      }
    }

    private static class exists_resultStandardScheme extends StandardScheme<exists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exists_resultTupleSchemeFactory implements SchemeFactory {
      public exists_resultTupleScheme getScheme() {
        return new exists_resultTupleScheme();
      }
    }

    private static class exists_resultTupleScheme extends TupleScheme<exists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lrange_args implements org.apache.thrift.TBase<lrange_args, lrange_args._Fields>, java.io.Serializable, Cloneable, Comparable<lrange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrange_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ENDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ends", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lrange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lrange_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public long start; // required
    public long ends; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      START((short)4, "start"),
      ENDS((short)5, "ends"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // START
            return START;
          case 5: // ENDS
            return ENDS;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __ENDS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENDS, new org.apache.thrift.meta_data.FieldMetaData("ends", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrange_args.class, metaDataMap);
    }

    public lrange_args() {
    }

    public lrange_args(
      long logIndex,
      String caller,
      String key,
      long start,
      long ends,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.start = start;
      setStartIsSet(true);
      this.ends = ends;
      setEndsIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrange_args(lrange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.start = other.start;
      this.ends = other.ends;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public lrange_args deepCopy() {
      return new lrange_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setStartIsSet(false);
      this.start = 0;
      setEndsIsSet(false);
      this.ends = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public lrange_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public lrange_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public lrange_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public long getStart() {
      return this.start;
    }

    public lrange_args setStart(long start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public long getEnds() {
      return this.ends;
    }

    public lrange_args setEnds(long ends) {
      this.ends = ends;
      setEndsIsSet(true);
      return this;
    }

    public void unsetEnds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    /** Returns true if field ends is set (has been assigned a value) and false otherwise */
    public boolean isSetEnds() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDS_ISSET_ID);
    }

    public void setEndsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDS_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public lrange_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((Long)value);
        }
        break;

      case ENDS:
        if (value == null) {
          unsetEnds();
        } else {
          setEnds((Long)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case START:
        return getStart();

      case ENDS:
        return getEnds();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case START:
        return isSetStart();
      case ENDS:
        return isSetEnds();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lrange_args)
        return this.equals((lrange_args)that);
      return false;
    }

    public boolean equals(lrange_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_ends = true;
      boolean that_present_ends = true;
      if (this_present_ends || that_present_ends) {
        if (!(this_present_ends && that_present_ends))
          return false;
        if (this.ends != that.ends)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_start = true;
      list.add(present_start);
      if (present_start)
        list.add(start);

      boolean present_ends = true;
      list.add(present_ends);
      if (present_ends)
        list.add(ends);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(lrange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnds()).compareTo(other.isSetEnds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ends, other.ends);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lrange_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ends:");
      sb.append(this.ends);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrange_argsStandardSchemeFactory implements SchemeFactory {
      public lrange_argsStandardScheme getScheme() {
        return new lrange_argsStandardScheme();
      }
    }

    private static class lrange_argsStandardScheme extends StandardScheme<lrange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start = iprot.readI64();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ends = iprot.readI64();
                struct.setEndsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI64(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDS_FIELD_DESC);
        oprot.writeI64(struct.ends);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrange_argsTupleSchemeFactory implements SchemeFactory {
      public lrange_argsTupleScheme getScheme() {
        return new lrange_argsTupleScheme();
      }
    }

    private static class lrange_argsTupleScheme extends TupleScheme<lrange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStart()) {
          optionals.set(3);
        }
        if (struct.isSetEnds()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStart()) {
          oprot.writeI64(struct.start);
        }
        if (struct.isSetEnds()) {
          oprot.writeI64(struct.ends);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.start = iprot.readI64();
          struct.setStartIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ends = iprot.readI64();
          struct.setEndsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class lrange_result implements org.apache.thrift.TBase<lrange_result, lrange_result._Fields>, java.io.Serializable, Cloneable, Comparable<lrange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lrange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lrange_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResListStr success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResListStr.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrange_result.class, metaDataMap);
    }

    public lrange_result() {
    }

    public lrange_result(
      com.frc.thrift.datatype.ResListStr success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrange_result(lrange_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResListStr(other.success);
      }
    }

    public lrange_result deepCopy() {
      return new lrange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResListStr getSuccess() {
      return this.success;
    }

    public lrange_result setSuccess(com.frc.thrift.datatype.ResListStr success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResListStr)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lrange_result)
        return this.equals((lrange_result)that);
      return false;
    }

    public boolean equals(lrange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(lrange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lrange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrange_resultStandardSchemeFactory implements SchemeFactory {
      public lrange_resultStandardScheme getScheme() {
        return new lrange_resultStandardScheme();
      }
    }

    private static class lrange_resultStandardScheme extends StandardScheme<lrange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResListStr();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrange_resultTupleSchemeFactory implements SchemeFactory {
      public lrange_resultTupleScheme getScheme() {
        return new lrange_resultTupleScheme();
      }
    }

    private static class lrange_resultTupleScheme extends TupleScheme<lrange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResListStr();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setnx_args implements org.apache.thrift.TBase<setnx_args, setnx_args._Fields>, java.io.Serializable, Cloneable, Comparable<setnx_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setnx_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXPIRED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expired_time", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setnx_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setnx_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public String value; // required
    public int expired_time; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      VALUE((short)4, "value"),
      EXPIRED_TIME((short)5, "expired_time"),
      EXT((short)6, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // VALUE
            return VALUE;
          case 5: // EXPIRED_TIME
            return EXPIRED_TIME;
          case 6: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __EXPIRED_TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPIRED_TIME, new org.apache.thrift.meta_data.FieldMetaData("expired_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setnx_args.class, metaDataMap);
    }

    public setnx_args() {
    }

    public setnx_args(
      long logIndex,
      String caller,
      String key,
      String value,
      int expired_time,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.value = value;
      this.expired_time = expired_time;
      setExpired_timeIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setnx_args(setnx_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.expired_time = other.expired_time;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public setnx_args deepCopy() {
      return new setnx_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.value = null;
      setExpired_timeIsSet(false);
      this.expired_time = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public setnx_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public setnx_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public setnx_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public setnx_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public int getExpired_time() {
      return this.expired_time;
    }

    public setnx_args setExpired_time(int expired_time) {
      this.expired_time = expired_time;
      setExpired_timeIsSet(true);
      return this;
    }

    public void unsetExpired_time() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRED_TIME_ISSET_ID);
    }

    /** Returns true if field expired_time is set (has been assigned a value) and false otherwise */
    public boolean isSetExpired_time() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPIRED_TIME_ISSET_ID);
    }

    public void setExpired_timeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRED_TIME_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public setnx_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case EXPIRED_TIME:
        if (value == null) {
          unsetExpired_time();
        } else {
          setExpired_time((Integer)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      case EXPIRED_TIME:
        return getExpired_time();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      case EXPIRED_TIME:
        return isSetExpired_time();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setnx_args)
        return this.equals((setnx_args)that);
      return false;
    }

    public boolean equals(setnx_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_expired_time = true;
      boolean that_present_expired_time = true;
      if (this_present_expired_time || that_present_expired_time) {
        if (!(this_present_expired_time && that_present_expired_time))
          return false;
        if (this.expired_time != that.expired_time)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_expired_time = true;
      list.add(present_expired_time);
      if (present_expired_time)
        list.add(expired_time);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(setnx_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExpired_time()).compareTo(other.isSetExpired_time());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpired_time()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired_time, other.expired_time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setnx_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expired_time:");
      sb.append(this.expired_time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setnx_argsStandardSchemeFactory implements SchemeFactory {
      public setnx_argsStandardScheme getScheme() {
        return new setnx_argsStandardScheme();
      }
    }

    private static class setnx_argsStandardScheme extends StandardScheme<setnx_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setnx_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXPIRED_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.expired_time = iprot.readI32();
                struct.setExpired_timeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setnx_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPIRED_TIME_FIELD_DESC);
        oprot.writeI32(struct.expired_time);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setnx_argsTupleSchemeFactory implements SchemeFactory {
      public setnx_argsTupleScheme getScheme() {
        return new setnx_argsTupleScheme();
      }
    }

    private static class setnx_argsTupleScheme extends TupleScheme<setnx_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setnx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        if (struct.isSetExpired_time()) {
          optionals.set(4);
        }
        if (struct.isSetExt()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetExpired_time()) {
          oprot.writeI32(struct.expired_time);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setnx_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(4)) {
          struct.expired_time = iprot.readI32();
          struct.setExpired_timeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class setnx_result implements org.apache.thrift.TBase<setnx_result, setnx_result._Fields>, java.io.Serializable, Cloneable, Comparable<setnx_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setnx_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setnx_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setnx_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setnx_result.class, metaDataMap);
    }

    public setnx_result() {
    }

    public setnx_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setnx_result(setnx_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public setnx_result deepCopy() {
      return new setnx_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public setnx_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setnx_result)
        return this.equals((setnx_result)that);
      return false;
    }

    public boolean equals(setnx_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setnx_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setnx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setnx_resultStandardSchemeFactory implements SchemeFactory {
      public setnx_resultStandardScheme getScheme() {
        return new setnx_resultStandardScheme();
      }
    }

    private static class setnx_resultStandardScheme extends StandardScheme<setnx_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setnx_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setnx_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setnx_resultTupleSchemeFactory implements SchemeFactory {
      public setnx_resultTupleScheme getScheme() {
        return new setnx_resultTupleScheme();
      }
    }

    private static class setnx_resultTupleScheme extends TupleScheme<setnx_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setnx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setnx_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lpush_args implements org.apache.thrift.TBase<lpush_args, lpush_args._Fields>, java.io.Serializable, Cloneable, Comparable<lpush_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lpush_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("strings", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lpush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lpush_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public List<String> strings; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      STRINGS((short)4, "strings"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // STRINGS
            return STRINGS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRINGS, new org.apache.thrift.meta_data.FieldMetaData("strings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lpush_args.class, metaDataMap);
    }

    public lpush_args() {
    }

    public lpush_args(
      long logIndex,
      String caller,
      String key,
      List<String> strings,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.strings = strings;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lpush_args(lpush_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetStrings()) {
        List<String> __this__strings = new ArrayList<String>(other.strings);
        this.strings = __this__strings;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public lpush_args deepCopy() {
      return new lpush_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.strings = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public lpush_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public lpush_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public lpush_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getStringsSize() {
      return (this.strings == null) ? 0 : this.strings.size();
    }

    public java.util.Iterator<String> getStringsIterator() {
      return (this.strings == null) ? null : this.strings.iterator();
    }

    public void addToStrings(String elem) {
      if (this.strings == null) {
        this.strings = new ArrayList<String>();
      }
      this.strings.add(elem);
    }

    public List<String> getStrings() {
      return this.strings;
    }

    public lpush_args setStrings(List<String> strings) {
      this.strings = strings;
      return this;
    }

    public void unsetStrings() {
      this.strings = null;
    }

    /** Returns true if field strings is set (has been assigned a value) and false otherwise */
    public boolean isSetStrings() {
      return this.strings != null;
    }

    public void setStringsIsSet(boolean value) {
      if (!value) {
        this.strings = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public lpush_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case STRINGS:
        if (value == null) {
          unsetStrings();
        } else {
          setStrings((List<String>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case STRINGS:
        return getStrings();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case STRINGS:
        return isSetStrings();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lpush_args)
        return this.equals((lpush_args)that);
      return false;
    }

    public boolean equals(lpush_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_strings = true && this.isSetStrings();
      boolean that_present_strings = true && that.isSetStrings();
      if (this_present_strings || that_present_strings) {
        if (!(this_present_strings && that_present_strings))
          return false;
        if (!this.strings.equals(that.strings))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_strings = true && (isSetStrings());
      list.add(present_strings);
      if (present_strings)
        list.add(strings);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(lpush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrings()).compareTo(other.isSetStrings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strings, other.strings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lpush_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strings:");
      if (this.strings == null) {
        sb.append("null");
      } else {
        sb.append(this.strings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lpush_argsStandardSchemeFactory implements SchemeFactory {
      public lpush_argsStandardScheme getScheme() {
        return new lpush_argsStandardScheme();
      }
    }

    private static class lpush_argsStandardScheme extends StandardScheme<lpush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lpush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.strings = new ArrayList<String>(_list36.size);
                  String _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = iprot.readString();
                    struct.strings.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setStringsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lpush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.strings != null) {
          oprot.writeFieldBegin(STRINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strings.size()));
            for (String _iter39 : struct.strings)
            {
              oprot.writeString(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lpush_argsTupleSchemeFactory implements SchemeFactory {
      public lpush_argsTupleScheme getScheme() {
        return new lpush_argsTupleScheme();
      }
    }

    private static class lpush_argsTupleScheme extends TupleScheme<lpush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStrings()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStrings()) {
          {
            oprot.writeI32(struct.strings.size());
            for (String _iter40 : struct.strings)
            {
              oprot.writeString(_iter40);
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.strings = new ArrayList<String>(_list41.size);
            String _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = iprot.readString();
              struct.strings.add(_elem42);
            }
          }
          struct.setStringsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class lpush_result implements org.apache.thrift.TBase<lpush_result, lpush_result._Fields>, java.io.Serializable, Cloneable, Comparable<lpush_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lpush_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lpush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lpush_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lpush_result.class, metaDataMap);
    }

    public lpush_result() {
    }

    public lpush_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lpush_result(lpush_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public lpush_result deepCopy() {
      return new lpush_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public lpush_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lpush_result)
        return this.equals((lpush_result)that);
      return false;
    }

    public boolean equals(lpush_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(lpush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lpush_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lpush_resultStandardSchemeFactory implements SchemeFactory {
      public lpush_resultStandardScheme getScheme() {
        return new lpush_resultStandardScheme();
      }
    }

    private static class lpush_resultStandardScheme extends StandardScheme<lpush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lpush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lpush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lpush_resultTupleSchemeFactory implements SchemeFactory {
      public lpush_resultTupleScheme getScheme() {
        return new lpush_resultTupleScheme();
      }
    }

    private static class lpush_resultTupleScheme extends TupleScheme<lpush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lpush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lpush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpush_args implements org.apache.thrift.TBase<rpush_args, rpush_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpush_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpush_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("strings", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpush_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public List<String> strings; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      STRINGS((short)4, "strings"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // STRINGS
            return STRINGS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRINGS, new org.apache.thrift.meta_data.FieldMetaData("strings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpush_args.class, metaDataMap);
    }

    public rpush_args() {
    }

    public rpush_args(
      long logIndex,
      String caller,
      String key,
      List<String> strings,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.strings = strings;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpush_args(rpush_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetStrings()) {
        List<String> __this__strings = new ArrayList<String>(other.strings);
        this.strings = __this__strings;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public rpush_args deepCopy() {
      return new rpush_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      this.strings = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public rpush_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public rpush_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public rpush_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getStringsSize() {
      return (this.strings == null) ? 0 : this.strings.size();
    }

    public java.util.Iterator<String> getStringsIterator() {
      return (this.strings == null) ? null : this.strings.iterator();
    }

    public void addToStrings(String elem) {
      if (this.strings == null) {
        this.strings = new ArrayList<String>();
      }
      this.strings.add(elem);
    }

    public List<String> getStrings() {
      return this.strings;
    }

    public rpush_args setStrings(List<String> strings) {
      this.strings = strings;
      return this;
    }

    public void unsetStrings() {
      this.strings = null;
    }

    /** Returns true if field strings is set (has been assigned a value) and false otherwise */
    public boolean isSetStrings() {
      return this.strings != null;
    }

    public void setStringsIsSet(boolean value) {
      if (!value) {
        this.strings = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public rpush_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case STRINGS:
        if (value == null) {
          unsetStrings();
        } else {
          setStrings((List<String>)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case STRINGS:
        return getStrings();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case STRINGS:
        return isSetStrings();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpush_args)
        return this.equals((rpush_args)that);
      return false;
    }

    public boolean equals(rpush_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_strings = true && this.isSetStrings();
      boolean that_present_strings = true && that.isSetStrings();
      if (this_present_strings || that_present_strings) {
        if (!(this_present_strings && that_present_strings))
          return false;
        if (!this.strings.equals(that.strings))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_strings = true && (isSetStrings());
      list.add(present_strings);
      if (present_strings)
        list.add(strings);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStrings()).compareTo(other.isSetStrings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strings, other.strings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpush_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strings:");
      if (this.strings == null) {
        sb.append("null");
      } else {
        sb.append(this.strings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpush_argsStandardSchemeFactory implements SchemeFactory {
      public rpush_argsStandardScheme getScheme() {
        return new rpush_argsStandardScheme();
      }
    }

    private static class rpush_argsStandardScheme extends StandardScheme<rpush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.strings = new ArrayList<String>(_list44.size);
                  String _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = iprot.readString();
                    struct.strings.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setStringsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.strings != null) {
          oprot.writeFieldBegin(STRINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strings.size()));
            for (String _iter47 : struct.strings)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpush_argsTupleSchemeFactory implements SchemeFactory {
      public rpush_argsTupleScheme getScheme() {
        return new rpush_argsTupleScheme();
      }
    }

    private static class rpush_argsTupleScheme extends TupleScheme<rpush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetStrings()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetStrings()) {
          {
            oprot.writeI32(struct.strings.size());
            for (String _iter48 : struct.strings)
            {
              oprot.writeString(_iter48);
            }
          }
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.strings = new ArrayList<String>(_list49.size);
            String _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = iprot.readString();
              struct.strings.add(_elem50);
            }
          }
          struct.setStringsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class rpush_result implements org.apache.thrift.TBase<rpush_result, rpush_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpush_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpush_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpush_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpush_result.class, metaDataMap);
    }

    public rpush_result() {
    }

    public rpush_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpush_result(rpush_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public rpush_result deepCopy() {
      return new rpush_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public rpush_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpush_result)
        return this.equals((rpush_result)that);
      return false;
    }

    public boolean equals(rpush_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpush_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpush_resultStandardSchemeFactory implements SchemeFactory {
      public rpush_resultStandardScheme getScheme() {
        return new rpush_resultStandardScheme();
      }
    }

    private static class rpush_resultStandardScheme extends StandardScheme<rpush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpush_resultTupleSchemeFactory implements SchemeFactory {
      public rpush_resultTupleScheme getScheme() {
        return new rpush_resultTupleScheme();
      }
    }

    private static class rpush_resultTupleScheme extends TupleScheme<rpush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class expired_args implements org.apache.thrift.TBase<expired_args, expired_args._Fields>, java.io.Serializable, Cloneable, Comparable<expired_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expired_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seconds", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expired_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expired_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String key; // required
    public int seconds; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      KEY((short)3, "key"),
      SECONDS((short)4, "seconds"),
      EXT((short)5, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // KEY
            return KEY;
          case 4: // SECONDS
            return SECONDS;
          case 5: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private static final int __SECONDS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECONDS, new org.apache.thrift.meta_data.FieldMetaData("seconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expired_args.class, metaDataMap);
    }

    public expired_args() {
    }

    public expired_args(
      long logIndex,
      String caller,
      String key,
      int seconds,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.key = key;
      this.seconds = seconds;
      setSecondsIsSet(true);
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expired_args(expired_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.seconds = other.seconds;
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public expired_args deepCopy() {
      return new expired_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.key = null;
      setSecondsIsSet(false);
      this.seconds = 0;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public expired_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public expired_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public expired_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getSeconds() {
      return this.seconds;
    }

    public expired_args setSeconds(int seconds) {
      this.seconds = seconds;
      setSecondsIsSet(true);
      return this;
    }

    public void unsetSeconds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECONDS_ISSET_ID);
    }

    /** Returns true if field seconds is set (has been assigned a value) and false otherwise */
    public boolean isSetSeconds() {
      return EncodingUtils.testBit(__isset_bitfield, __SECONDS_ISSET_ID);
    }

    public void setSecondsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECONDS_ISSET_ID, value);
    }

    public String getExt() {
      return this.ext;
    }

    public expired_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case SECONDS:
        if (value == null) {
          unsetSeconds();
        } else {
          setSeconds((Integer)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case KEY:
        return getKey();

      case SECONDS:
        return getSeconds();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case KEY:
        return isSetKey();
      case SECONDS:
        return isSetSeconds();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expired_args)
        return this.equals((expired_args)that);
      return false;
    }

    public boolean equals(expired_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_seconds = true;
      boolean that_present_seconds = true;
      if (this_present_seconds || that_present_seconds) {
        if (!(this_present_seconds && that_present_seconds))
          return false;
        if (this.seconds != that.seconds)
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_seconds = true;
      list.add(present_seconds);
      if (present_seconds)
        list.add(seconds);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(expired_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeconds()).compareTo(other.isSetSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seconds, other.seconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expired_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("seconds:");
      sb.append(this.seconds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expired_argsStandardSchemeFactory implements SchemeFactory {
      public expired_argsStandardScheme getScheme() {
        return new expired_argsStandardScheme();
      }
    }

    private static class expired_argsStandardScheme extends StandardScheme<expired_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expired_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seconds = iprot.readI32();
                struct.setSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expired_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SECONDS_FIELD_DESC);
        oprot.writeI32(struct.seconds);
        oprot.writeFieldEnd();
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expired_argsTupleSchemeFactory implements SchemeFactory {
      public expired_argsTupleScheme getScheme() {
        return new expired_argsTupleScheme();
      }
    }

    private static class expired_argsTupleScheme extends TupleScheme<expired_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expired_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetKey()) {
          optionals.set(2);
        }
        if (struct.isSetSeconds()) {
          optionals.set(3);
        }
        if (struct.isSetExt()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetSeconds()) {
          oprot.writeI32(struct.seconds);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expired_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.seconds = iprot.readI32();
          struct.setSecondsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class expired_result implements org.apache.thrift.TBase<expired_result, expired_result._Fields>, java.io.Serializable, Cloneable, Comparable<expired_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("expired_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new expired_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new expired_resultTupleSchemeFactory());
    }

    public com.frc.thrift.datatype.ResBool success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.frc.thrift.datatype.ResBool.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(expired_result.class, metaDataMap);
    }

    public expired_result() {
    }

    public expired_result(
      com.frc.thrift.datatype.ResBool success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expired_result(expired_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.frc.thrift.datatype.ResBool(other.success);
      }
    }

    public expired_result deepCopy() {
      return new expired_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.frc.thrift.datatype.ResBool getSuccess() {
      return this.success;
    }

    public expired_result setSuccess(com.frc.thrift.datatype.ResBool success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.frc.thrift.datatype.ResBool)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expired_result)
        return this.equals((expired_result)that);
      return false;
    }

    public boolean equals(expired_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(expired_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("expired_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class expired_resultStandardSchemeFactory implements SchemeFactory {
      public expired_resultStandardScheme getScheme() {
        return new expired_resultStandardScheme();
      }
    }

    private static class expired_resultStandardScheme extends StandardScheme<expired_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, expired_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.frc.thrift.datatype.ResBool();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, expired_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class expired_resultTupleSchemeFactory implements SchemeFactory {
      public expired_resultTupleScheme getScheme() {
        return new expired_resultTupleScheme();
      }
    }

    private static class expired_resultTupleScheme extends TupleScheme<expired_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, expired_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, expired_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.frc.thrift.datatype.ResBool();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class echo_args implements org.apache.thrift.TBase<echo_args, echo_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_args");

    private static final org.apache.thrift.protocol.TField LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("logIndex", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SRC_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ext", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_argsTupleSchemeFactory());
    }

    public long logIndex; // required
    public String caller; // required
    public String srcStr; // required
    public String ext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOG_INDEX((short)1, "logIndex"),
      CALLER((short)2, "caller"),
      SRC_STR((short)3, "srcStr"),
      EXT((short)4, "ext");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOG_INDEX
            return LOG_INDEX;
          case 2: // CALLER
            return CALLER;
          case 3: // SRC_STR
            return SRC_STR;
          case 4: // EXT
            return EXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOGINDEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("logIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_STR, new org.apache.thrift.meta_data.FieldMetaData("srcStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXT, new org.apache.thrift.meta_data.FieldMetaData("ext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_args.class, metaDataMap);
    }

    public echo_args() {
    }

    public echo_args(
      long logIndex,
      String caller,
      String srcStr,
      String ext)
    {
      this();
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      this.caller = caller;
      this.srcStr = srcStr;
      this.ext = ext;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_args(echo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.logIndex = other.logIndex;
      if (other.isSetCaller()) {
        this.caller = other.caller;
      }
      if (other.isSetSrcStr()) {
        this.srcStr = other.srcStr;
      }
      if (other.isSetExt()) {
        this.ext = other.ext;
      }
    }

    public echo_args deepCopy() {
      return new echo_args(this);
    }

    @Override
    public void clear() {
      setLogIndexIsSet(false);
      this.logIndex = 0;
      this.caller = null;
      this.srcStr = null;
      this.ext = null;
    }

    public long getLogIndex() {
      return this.logIndex;
    }

    public echo_args setLogIndex(long logIndex) {
      this.logIndex = logIndex;
      setLogIndexIsSet(true);
      return this;
    }

    public void unsetLogIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    /** Returns true if field logIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLogIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __LOGINDEX_ISSET_ID);
    }

    public void setLogIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINDEX_ISSET_ID, value);
    }

    public String getCaller() {
      return this.caller;
    }

    public echo_args setCaller(String caller) {
      this.caller = caller;
      return this;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public String getSrcStr() {
      return this.srcStr;
    }

    public echo_args setSrcStr(String srcStr) {
      this.srcStr = srcStr;
      return this;
    }

    public void unsetSrcStr() {
      this.srcStr = null;
    }

    /** Returns true if field srcStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcStr() {
      return this.srcStr != null;
    }

    public void setSrcStrIsSet(boolean value) {
      if (!value) {
        this.srcStr = null;
      }
    }

    public String getExt() {
      return this.ext;
    }

    public echo_args setExt(String ext) {
      this.ext = ext;
      return this;
    }

    public void unsetExt() {
      this.ext = null;
    }

    /** Returns true if field ext is set (has been assigned a value) and false otherwise */
    public boolean isSetExt() {
      return this.ext != null;
    }

    public void setExtIsSet(boolean value) {
      if (!value) {
        this.ext = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOG_INDEX:
        if (value == null) {
          unsetLogIndex();
        } else {
          setLogIndex((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((String)value);
        }
        break;

      case SRC_STR:
        if (value == null) {
          unsetSrcStr();
        } else {
          setSrcStr((String)value);
        }
        break;

      case EXT:
        if (value == null) {
          unsetExt();
        } else {
          setExt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOG_INDEX:
        return getLogIndex();

      case CALLER:
        return getCaller();

      case SRC_STR:
        return getSrcStr();

      case EXT:
        return getExt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOG_INDEX:
        return isSetLogIndex();
      case CALLER:
        return isSetCaller();
      case SRC_STR:
        return isSetSrcStr();
      case EXT:
        return isSetExt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_args)
        return this.equals((echo_args)that);
      return false;
    }

    public boolean equals(echo_args that) {
      if (that == null)
        return false;

      boolean this_present_logIndex = true;
      boolean that_present_logIndex = true;
      if (this_present_logIndex || that_present_logIndex) {
        if (!(this_present_logIndex && that_present_logIndex))
          return false;
        if (this.logIndex != that.logIndex)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      boolean this_present_srcStr = true && this.isSetSrcStr();
      boolean that_present_srcStr = true && that.isSetSrcStr();
      if (this_present_srcStr || that_present_srcStr) {
        if (!(this_present_srcStr && that_present_srcStr))
          return false;
        if (!this.srcStr.equals(that.srcStr))
          return false;
      }

      boolean this_present_ext = true && this.isSetExt();
      boolean that_present_ext = true && that.isSetExt();
      if (this_present_ext || that_present_ext) {
        if (!(this_present_ext && that_present_ext))
          return false;
        if (!this.ext.equals(that.ext))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_logIndex = true;
      list.add(present_logIndex);
      if (present_logIndex)
        list.add(logIndex);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      boolean present_srcStr = true && (isSetSrcStr());
      list.add(present_srcStr);
      if (present_srcStr)
        list.add(srcStr);

      boolean present_ext = true && (isSetExt());
      list.add(present_ext);
      if (present_ext)
        list.add(ext);

      return list.hashCode();
    }

    @Override
    public int compareTo(echo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLogIndex()).compareTo(other.isSetLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logIndex, other.logIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcStr()).compareTo(other.isSetSrcStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcStr, other.srcStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExt()).compareTo(other.isSetExt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ext, other.ext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_args(");
      boolean first = true;

      sb.append("logIndex:");
      sb.append(this.logIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcStr:");
      if (this.srcStr == null) {
        sb.append("null");
      } else {
        sb.append(this.srcStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ext:");
      if (this.ext == null) {
        sb.append("null");
      } else {
        sb.append(this.ext);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_argsStandardSchemeFactory implements SchemeFactory {
      public echo_argsStandardScheme getScheme() {
        return new echo_argsStandardScheme();
      }
    }

    private static class echo_argsStandardScheme extends StandardScheme<echo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.logIndex = iprot.readI64();
                struct.setLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caller = iprot.readString();
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRC_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcStr = iprot.readString();
                struct.setSrcStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ext = iprot.readString();
                struct.setExtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.logIndex);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          oprot.writeString(struct.caller);
          oprot.writeFieldEnd();
        }
        if (struct.srcStr != null) {
          oprot.writeFieldBegin(SRC_STR_FIELD_DESC);
          oprot.writeString(struct.srcStr);
          oprot.writeFieldEnd();
        }
        if (struct.ext != null) {
          oprot.writeFieldBegin(EXT_FIELD_DESC);
          oprot.writeString(struct.ext);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_argsTupleSchemeFactory implements SchemeFactory {
      public echo_argsTupleScheme getScheme() {
        return new echo_argsTupleScheme();
      }
    }

    private static class echo_argsTupleScheme extends TupleScheme<echo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLogIndex()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        if (struct.isSetSrcStr()) {
          optionals.set(2);
        }
        if (struct.isSetExt()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLogIndex()) {
          oprot.writeI64(struct.logIndex);
        }
        if (struct.isSetCaller()) {
          oprot.writeString(struct.caller);
        }
        if (struct.isSetSrcStr()) {
          oprot.writeString(struct.srcStr);
        }
        if (struct.isSetExt()) {
          oprot.writeString(struct.ext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.logIndex = iprot.readI64();
          struct.setLogIndexIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = iprot.readString();
          struct.setCallerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srcStr = iprot.readString();
          struct.setSrcStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ext = iprot.readString();
          struct.setExtIsSet(true);
        }
      }
    }

  }

  public static class echo_result implements org.apache.thrift.TBase<echo_result, echo_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new echo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new echo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_result.class, metaDataMap);
    }

    public echo_result() {
    }

    public echo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_result(echo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public echo_result deepCopy() {
      return new echo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public echo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof echo_result)
        return this.equals((echo_result)that);
      return false;
    }

    public boolean equals(echo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(echo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("echo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_resultStandardSchemeFactory implements SchemeFactory {
      public echo_resultStandardScheme getScheme() {
        return new echo_resultStandardScheme();
      }
    }

    private static class echo_resultStandardScheme extends StandardScheme<echo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_resultTupleSchemeFactory implements SchemeFactory {
      public echo_resultTupleScheme getScheme() {
        return new echo_resultTupleScheme();
      }
    }

    private static class echo_resultTupleScheme extends TupleScheme<echo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
